<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BAIXS&#39;s BOOK</title>
  
  <subtitle>百晓生的兵器谱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T05:02:49.429Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>断桥百晓生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/hello-world/"/>
    <id>http://yoursite.com/hello-world/</id>
    <published>2018-08-16T04:12:57.000Z</published>
    <updated>2018-08-14T05:02:49.429Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS中函数与对象之间的关系</title>
    <link href="http://yoursite.com/JS%E4%B8%AD%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/JS中函数与对象之间的关系/</id>
    <published>2018-08-08T06:18:09.000Z</published>
    <updated>2018-08-14T06:20:06.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>函数的作用是帮我们编写更少的代码，并阻止我们重复工作。</p></blockquote><p>函数是JavaScript中的主要概念之一，同时函数也是任何编程语言的基本特性。但和一些基于类的语言如Java或PHP不同的是，ES6之前的JavaScript并不遵循基于类的结构，而是遵循基于原型的继承，这很容易会让人感到混乱。</p><p>在JavaScript中，函数有一个额外的工作要执行：创建对象。正如我们所知道的那样，JavaScript基于原型的继承，但我们依然需要创建一个对象，这样我们才能够将相关的逻辑组合到一起。</p><a id="more"></a><p>那么我们如何从函数中创建对象呢？使用关键字new。为此，我们需要创建一个被称作构造函数的东西。</p><p>函数在本质上是一个对象，它具有两个特殊的属性：名称和代码。如果它被命名，那么名称将存储在name属性中，而我们要执行的代码将存储在代码中。当我们调用函数时，JavaScript将会在代码属性里执行代码段。</p><p>写一个简单的函数看看控制台里打印出了什么。</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-7b5b7f0191fc0cff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p><p>在控制台里，Window对象中的example有一个name属性，属性名称为”example”。当我们用new关键字调用这个函数之前，这个函数只保持为普通函数。当使用new关键字调用时，我们调用的是prototype.constructor方法，该方法可以从函数中实例化一个新的对象。</p><p>由于函数也是对象的一种，所以我们也可以在example函数中附加一些属性和方法。方法存储在函数的prototype属性中，而不是以单个对象的方式存在的，这些方法对于此函数创建的所有实例对象都是通用的。这是为了将所有方法保存在同一个位置，有助于减少对象的内存占用。</p><p>示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let ep = function example(name, age)&#123;</span><br><span class="line"></span><br><span class="line">    this.name = name;</span><br><span class="line"></span><br><span class="line">    this.age = age;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ep.prototype.sayHi = function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(`my name is $&#123;this.name&#125;, my age is $&#123;this.age&#125;`);</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  let ep1 = new ep(1,2);</span><br><span class="line"></span><br><span class="line">  console.log(ep1);</span><br></pre></td></tr></table></figure><p>查看控制台中输出：</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-c6824f87901def27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;函数的作用是帮我们编写更少的代码，并阻止我们重复工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数是JavaScript中的主要概念之一，同时函数也是任何编程语言的基本特性。但和一些基于类的语言如Java或PHP不同的是，ES6之前的JavaScript并不遵循基于类的结构，而是遵循基于原型的继承，这很容易会让人感到混乱。&lt;/p&gt;
&lt;p&gt;在JavaScript中，函数有一个额外的工作要执行：创建对象。正如我们所知道的那样，JavaScript基于原型的继承，但我们依然需要创建一个对象，这样我们才能够将相关的逻辑组合到一起。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js学习：使用Loopback3.0构建应用程序（一）</title>
    <link href="http://yoursite.com/loopback-chapter1/"/>
    <id>http://yoursite.com/loopback-chapter1/</id>
    <published>2017-06-20T14:12:57.000Z</published>
    <updated>2018-08-14T06:16:30.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><blockquote><p>安装LoopBack工具来创建和开发LoopBack 3.0应用程序。</p></blockquote><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node下载地址</a></p><h3 id="安装loopback工具"><a href="#安装loopback工具" class="headerlink" title="安装loopback工具"></a>安装loopback工具</h3><p>虽然你可以自己从头开始编写一个LoopBack应用程序，但是安装一个LoopBack CLI工具能够使它更容易入门。它将构建应用程序的基本结构，然后您可以根据需要进行自定义。</p><p>LoopBack提供了两个工具的选项：<a href="http://loopback.io/doc/en/lb3/Installation.html#install-loopback-cli-tool" target="_blank" rel="noopener">LoopBack CLI</a> 和 <a href="http://loopback.io/doc/en/lb3/Installation.html#install-ibm-api-connect-developer-toolkit" target="_blank" rel="noopener">IBM API Connect开发工具包</a>，这里可以选择LoopBack CLI来进行应用程序的构建。</p><a id="more"></a><h4 id="安装Loopback-CLI工具"><a href="#安装Loopback-CLI工具" class="headerlink" title="安装Loopback CLI工具"></a>安装Loopback CLI工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g loopback-cli</span><br></pre></td></tr></table></figure><p>这一步将安装 <code>lb</code> 命令行工具，用于构建和修改LoopBack应用程序。</p><h3 id="安装更新"><a href="#安装更新" class="headerlink" title="安装更新"></a>安装更新</h3><p>如果之前安装过strongloop，需要进行一次版本的更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure><p>如果遇到任何问题，可以尝试卸载重装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g strongloop</span><br><span class="line">npm cache clear</span><br><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure><h2 id="二、使用Loopback创建一个应用"><a href="#二、使用Loopback创建一个应用" class="headerlink" title="二、使用Loopback创建一个应用"></a>二、使用Loopback创建一个应用</h2><h3 id="创建一个简单的API"><a href="#创建一个简单的API" class="headerlink" title="创建一个简单的API"></a>创建一个简单的API</h3><p>首先使用loopback-cli创建一个新的应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb</span><br></pre></td></tr></table></figure><p>LoopBack应用生成器将提示您输入应用程序的名称。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">     _-----_</span><br><span class="line">    |       |    .--------------------------.</span><br><span class="line">    |--(o)--|    |  Let&apos;s create a LoopBack |</span><br><span class="line">   `---------´   |       application!       |</span><br><span class="line">    ( _´U`_ )    &apos;--------------------------&apos;</span><br><span class="line">    /___A___\</span><br><span class="line">     |  ~  |</span><br><span class="line">   __&apos;.___.&apos;__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line">[?] What&apos;s the name of your application? loopback-getting-started</span><br><span class="line">[?] Enter name of the directory to contain the project: loopback-getting-started</span><br></pre></td></tr></table></figure><blockquote><p>这里可以替换成任何你喜欢的名字，本教程使用了官方文档中的名称：loopback-getting-started。</p></blockquote><p>接下来cli工具会询问要创建什么样的应用程序：可以选择 <code>hello-world</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? What kind of application do you have in mind? (Use arrow keys)</span><br><span class="line">  api-server (A LoopBack API server with local User auth)</span><br><span class="line">  empty-server (An empty LoopBack API, without any configured models or datasources)</span><br><span class="line">❯ hello-world (A project containing a controller, including a single vanilla Message and</span><br><span class="line">    a single remote method)</span><br><span class="line">  notes (A project containing a basic working example, including a memory database)</span><br></pre></td></tr></table></figure><p>然后，生成器将在其构建应用程序时创建如下信息，包括：</p><ol><li>初始化项目的文件夹结构。</li><li>创建默认的JSON文件。</li><li>创建默认的JavaScript文件。</li><li>下载并安装依赖节点模块（省去手动安装npm的一步）。</li></ol><h3 id="创建一个数据模型"><a href="#创建一个数据模型" class="headerlink" title="创建一个数据模型"></a>创建一个数据模型</h3><p>完成了初始项目的构建，接下来我们将创建一个自动具有REST API接口的CoffeeShop模型。</p><p>进入应用程序目录，然后运行LoopBack模型生成器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb model</span><br></pre></td></tr></table></figure><p>生成器将提示输入数据模型的名称，输入CoffeeShop：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Enter the model name: CoffeeShop</span><br></pre></td></tr></table></figure><p>它会询问您是否要将模型附加到已经一些已经定义的数据源。 此时，只有默认的内存数据源可用。按Enter键选择它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[?] Select the data-source to attach CoffeeShop to: (Use arrow keys)</span><br><span class="line">❯ db (memory)</span><br></pre></td></tr></table></figure><p>然后，生成器将提示您使用基类作为模型。由于您在最终会把该模型连接到数据库中的持久数据源，所以这里选择PersistedModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[?] Select model&apos;s base class: (Use arrow keys)</span><br><span class="line">  Model</span><br><span class="line">❯ PersistedModel</span><br><span class="line">  ACL</span><br><span class="line">  AccessToken</span><br><span class="line">  Application</span><br><span class="line">  Change</span><br><span class="line">  Checkpoint</span><br></pre></td></tr></table></figure><p>PersistedModel是连接到持久性数据源（如数据库）的所有模型的基础对象，也就是基类。</p><blockquote><p>关于Loopback中的模型：</p><p>模型是LoopBack的核心，表示如数据库或其他后端服务（REST，SOAP等）等后端数据源。 LoopBack模型是具有Node和REST API的JavaScript对象。</p><p>LoopBack的一个关键功能是当您定义一个模型时，它将自动附带预定义的REST API，并具有完整的创建，读取，更新和删除操作。</p><p>Basic模型对象具有添加钩子和验证数据的方法。其他模型对象都“继承”它。模型具有继承层次结构，如下图所示：将模型附加到持久性数据源时，它将成为具有创建，检索，更新和删除操作的连接模型。 LoopBack的内置模型继承自它。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-f7230f84f992a43d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="model的继承关系"></p></blockquote><p>LoopBack的强大优点之一是它自动为您的模型生成REST API。生成器将询问您是否要公开此REST API。 </p><p>再次输入Enter接受默认值，并通过REST暴露CoffeeShop模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Expose CoffeeShop via the REST API? (Y/n) Y</span><br></pre></td></tr></table></figure><p>LoopBack使用模型名称的复数自动创建与模型关联的REST路由。默认情况下，它将您的名称复数（通过添加“s”），但是如果需要，您可以指定自定义复数形式。</p><p>按Enter接受默认复数形式（CoffeeShops）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Custom plural form (used to build REST URL):</span><br></pre></td></tr></table></figure><p>接下来，系统会询问您是要仅在服务器上创建模型，还是在<code>/common</code>目录中创建模型，这些模型可能由服务器端口和客户端LoopBack API使用。选择common，即使在这个应用程序中，你只使用服务器端模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Common model or server only?</span><br><span class="line">❯ common</span><br><span class="line">  server</span><br></pre></td></tr></table></figure><p>每个模型都有属性。现在，您将为CoffeeShop模型定义一个属性“name”。</p><p>选择字符串作为属性类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Let&apos;s add some CoffeeShop properties now.</span><br><span class="line">Enter an empty property name when done.</span><br><span class="line">[?] Property name: name</span><br><span class="line">   invoke   loopback:property</span><br><span class="line">[?] Property type: (Use arrow keys)</span><br><span class="line">❯ string</span><br><span class="line">  number</span><br><span class="line">  boolean</span><br><span class="line">  object</span><br><span class="line">  array</span><br><span class="line">  date</span><br><span class="line">  buffer</span><br><span class="line">  geopoint</span><br><span class="line">  (other)</span><br></pre></td></tr></table></figure><p>每个属性可以是可选的或必需的。输入 <code>y</code> 以将 <code>name</code> 设为必需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Required? (y/N)</span><br></pre></td></tr></table></figure><p>然后系统会提示您输入属性的默认值;按Enter键不设默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Default value[leave blank for none]:</span><br></pre></td></tr></table></figure><p>然后，系统会提示您添加其他属性。按照提示添加名为“city”的必需属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Let&apos;s add another CoffeeShop property.</span><br><span class="line">? Property name: city</span><br><span class="line">? Property type: string</span><br><span class="line">? Required? Yes</span><br><span class="line">? Default value[leave blank for none]:</span><br></pre></td></tr></table></figure><p>当提示输入下一个属性的名称时，按Enter键结束模型创建过程。</p><p>模型生成器将在应用程序的 <code>common / models</code> 目录中创建两个定义模型的文件： <code>coffee-shop.json</code> 和 <code>coffee-shop.js</code>。</p><blockquote><p>LoopBack模型生成器自动将驼峰式的模型名称（例如MyModel）转换为小写字母名称（my-model）。例如，如果您使用模型生成器创建一个名为“FooBar”的模型，它将在 <code>common/models</code> 中创建<code>foo-bar.json</code>和<code>foo-bar.js</code>文件。但是，模型名称（“FooBar”）将通过模型的名称属性进行保留。</p></blockquote><h3 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">...</span><br><span class="line">Browse your REST API at http://0.0.0.0:3000/explorer</span><br><span class="line">Web server listening at: http://0.0.0.0:3000/</span><br></pre></td></tr></table></figure><p>现在打开你的浏览器到<a href="http://0.0.0.0:3000/explorer" target="_blank" rel="noopener">http://0.0.0.0:3000/explorer</a> 或<a href="http://localhost:3000/explorer" target="_blank" rel="noopener">http://localhost:3000/explorer</a> 。您将看到StrongLoop API资源管理器：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-70980b142c629bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>通过使用LoopBack的一系列简单的步骤，您创建了一个CoffeeShop模型并为它设置了一些属性，然后通过REST进行公开。</p><h2 id="三、使用API​​资源管理器"><a href="#三、使用API​​资源管理器" class="headerlink" title="三、使用API​​资源管理器"></a>三、使用API​​资源管理器</h2><p>运行API​​资源管理器</p><p>运行应用: <code>node .</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装LoopBack工具来创建和开发LoopBack 3.0应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node.js&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装loopback工具&quot;&gt;&lt;a href=&quot;#安装loopback工具&quot; class=&quot;headerlink&quot; title=&quot;安装loopback工具&quot;&gt;&lt;/a&gt;安装loopback工具&lt;/h3&gt;&lt;p&gt;虽然你可以自己从头开始编写一个LoopBack应用程序，但是安装一个LoopBack CLI工具能够使它更容易入门。它将构建应用程序的基本结构，然后您可以根据需要进行自定义。&lt;/p&gt;
&lt;p&gt;LoopBack提供了两个工具的选项：&lt;a href=&quot;http://loopback.io/doc/en/lb3/Installation.html#install-loopback-cli-tool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LoopBack CLI&lt;/a&gt; 和 &lt;a href=&quot;http://loopback.io/doc/en/lb3/Installation.html#install-ibm-api-connect-developer-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IBM API Connect开发工具包&lt;/a&gt;，这里可以选择LoopBack CLI来进行应用程序的构建。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
