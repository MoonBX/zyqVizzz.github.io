<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>百晓生的兵器谱</title>
  
  <subtitle>BAIXS&#39;s BOOK</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zyqvizzz.github.io/"/>
  <updated>2018-08-14T10:48:47.726Z</updated>
  <id>http://zyqvizzz.github.io/</id>
  
  <author>
    <name>断桥百晓生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Callbacks Promises 和 Async/Await写一段异步代码</title>
    <link href="http://zyqvizzz.github.io/asynchronous/"/>
    <id>http://zyqvizzz.github.io/asynchronous/</id>
    <published>2018-08-12T07:31:09.000Z</published>
    <updated>2018-08-14T10:48:47.726Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://zyqvizzz.github.io/tags/JavaScript/"/>
    
      <category term="Async" scheme="http://zyqvizzz.github.io/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>JS中函数与对象之间的关系</title>
    <link href="http://zyqvizzz.github.io/JS%E4%B8%AD%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://zyqvizzz.github.io/JS中函数与对象之间的关系/</id>
    <published>2018-08-08T06:18:09.000Z</published>
    <updated>2018-08-14T07:14:20.458Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>函数的作用是帮我们编写更少的代码，并阻止我们重复工作。</p></blockquote><p>函数是JavaScript中的主要概念之一，同时函数也是任何编程语言的基本特性。但和一些基于类的语言如Java或PHP不同的是，ES6之前的JavaScript并不遵循基于类的结构，而是遵循基于原型的继承，这很容易会让人感到混乱。</p><p>在JavaScript中，函数有一个额外的工作要执行：创建对象。正如我们所知道的那样，JavaScript基于原型的继承，但我们依然需要创建一个对象，这样我们才能够将相关的逻辑组合到一起。</p><a id="more"></a><p>那么我们如何从函数中创建对象呢？使用关键字new。为此，我们需要创建一个被称作构造函数的东西。</p><p>函数在本质上是一个对象，它具有两个特殊的属性：名称和代码。如果它被命名，那么名称将存储在name属性中，而我们要执行的代码将存储在代码中。当我们调用函数时，JavaScript将会在代码属性里执行代码段。</p><p>写一个简单的函数看看控制台里打印出了什么。</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-7b5b7f0191fc0cff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p><p>在控制台里，Window对象中的example有一个name属性，属性名称为”example”。当我们用new关键字调用这个函数之前，这个函数只保持为普通函数。当使用new关键字调用时，我们调用的是prototype.constructor方法，该方法可以从函数中实例化一个新的对象。</p><p>由于函数也是对象的一种，所以我们也可以在example函数中附加一些属性和方法。方法存储在函数的prototype属性中，而不是以单个对象的方式存在的，这些方法对于此函数创建的所有实例对象都是通用的。这是为了将所有方法保存在同一个位置，有助于减少对象的内存占用。</p><p>示例代码如下：</p><figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> ep = <span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ep.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, my age is <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ep1 = <span class="keyword">new</span> ep(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(ep1);</span><br></pre></td></tr></table></figure><p>查看控制台中输出：</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-c6824f87901def27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;函数的作用是帮我们编写更少的代码，并阻止我们重复工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数是JavaScript中的主要概念之一，同时函数也是任何编程语言的基本特性。但和一些基于类的语言如Java或PHP不同的是，ES6之前的JavaScript并不遵循基于类的结构，而是遵循基于原型的继承，这很容易会让人感到混乱。&lt;/p&gt;
&lt;p&gt;在JavaScript中，函数有一个额外的工作要执行：创建对象。正如我们所知道的那样，JavaScript基于原型的继承，但我们依然需要创建一个对象，这样我们才能够将相关的逻辑组合到一起。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://zyqvizzz.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的数据结构：栈、队列和链表 -- 栈</title>
    <link href="http://zyqvizzz.github.io/JS%E4%B8%AD%E7%9A%84%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E8%A1%A8%20--%20%E6%A0%88/"/>
    <id>http://zyqvizzz.github.io/JS中的栈、队列和链表 -- 栈/</id>
    <published>2018-07-13T10:31:09.000Z</published>
    <updated>2018-08-14T10:34:13.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS中的栈、队列和链表-–-栈"><a href="#JS中的栈、队列和链表-–-栈" class="headerlink" title="JS中的栈、队列和链表 – 栈"></a>JS中的栈、队列和链表 – 栈</h1><p>接着上一篇 <a href="https://zyqvizzz.github.io/JS%E4%B8%AD%E7%9A%84%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E8%A1%A8--%E9%98%9F%E5%88%97/">《JS中的栈、队列和链表 – 队列》</a>的讨论，今天我们将用JS的方式实现栈。</p><h2 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h2><p>还是引用《JS高级编程》里的比喻来形容，栈就像叠盘子，一个一个往上叠，最后一个叠上去的，需要第一个拿出来。所以栈也是一个动态集合：新的元素被压入栈的最顶部；需要删除的元素将从栈的最顶部被弹出；删除的操作遵循LIFO（后进先出）的原则。</p><a id="more"></a><p>还有一个例子叫做链式活动执行，比如说，你需要组装一台电脑，为了完成这件事，你首先需要购买所有的计算机部件，但在此之前，你需要执行研究以获得最好的计算机部件，每个活动都是连接起来的，当前活动完成执行后其他活动才能继续。因此活动将如下图表示：</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-0556733169fb9601.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="活动执行"></p><p>在这种情况下使用栈可确保在完成主要活动完成之前，我们不会错过任何所需的子活动。</p><h2 id="如何实现栈结构？"><a href="#如何实现栈结构？" class="headerlink" title="如何实现栈结构？"></a>如何实现栈结构？</h2><ul><li>基本结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack&#123;</span><br><span class="line">1 将索引初始化为0</span><br><span class="line">2 声明一个Object用来存储所有堆栈的位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>push方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Push(item)&#123;</span><br><span class="line"> 1 将项目分配给可用的顶级索引</span><br><span class="line"> 2 增加栈的大小 - 或准备下一个顶部的索引</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pop方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pop()&#123;</span><br><span class="line"> 1 检查栈是否为空，如果是则返回</span><br><span class="line"> 2 减少栈的大小 - 也就是当前的顶部索引</span><br><span class="line"> 3 获取当前的顶部索引</span><br><span class="line"> 4 通过Object Prototype的删除操作将其从存储容器中删除</span><br><span class="line"> 5 返回元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈溢出和栈下溢"><a href="#栈溢出和栈下溢" class="headerlink" title="栈溢出和栈下溢"></a>栈溢出和栈下溢</h3><p>我们经常能听到栈溢出，那什么是栈溢出呢？百度百科的解释是：栈溢出就是不顾堆栈中分配的局部数据块大小，向该数据块写入了过多的数据，导致数据越界，结果覆盖了别的数据。当栈的大小超过允许的最大数量时会发生栈溢出，这个大小通常是事先定义好的。</p><p>最常见的例子是无限递归，如果递归过程中的停止条件没有明确定义，那么这个进程就会无限运行，导致栈溢出并崩溃。</p><p>除了栈溢出，还有一个栈下溢的概念，这个相比溢出要更容易理解：栈下溢就是弹出空栈时的状态。这是可以避免的问题，因为我们在执行pop()方法之前通常会进行非空的检查。</p><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> stackSize = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    push(item)&#123;</span><br><span class="line">      stack[stackSize] = item;</span><br><span class="line">      stackSize++;</span><br><span class="line">    &#125;,</span><br><span class="line">    pop()&#123;</span><br><span class="line">      <span class="comment">// 空栈检查</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;<span class="keyword">return</span> <span class="literal">undefined</span>;&#125;</span><br><span class="line">      stackSize--;</span><br><span class="line">      <span class="keyword">let</span> item = stack[stackSize]</span><br><span class="line">    &#125;,</span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">      <span class="keyword">return</span> stackSize === <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    size()&#123;</span><br><span class="line">      <span class="keyword">return</span> stackSize;</span><br><span class="line">    &#125;,</span><br><span class="line">    print()&#123;</span><br><span class="line">      <span class="keyword">let</span> result = [];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> stack)&#123;</span><br><span class="line">        result.unshift(stack[key])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么不使用数组呢？"><a href="#为什么不使用数组呢？" class="headerlink" title="为什么不使用数组呢？"></a>为什么不使用数组呢？</h2><p>和实现队列时的原因一样。</p><ul><li>Array.prototype里的大部分操作的时间复杂度都是O(n)</li><li>数组因为要保持顺序，所以它会占用一块内存</li><li>最重要的是，JS里万物皆对象。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS中的栈、队列和链表-–-栈&quot;&gt;&lt;a href=&quot;#JS中的栈、队列和链表-–-栈&quot; class=&quot;headerlink&quot; title=&quot;JS中的栈、队列和链表 – 栈&quot;&gt;&lt;/a&gt;JS中的栈、队列和链表 – 栈&lt;/h1&gt;&lt;p&gt;接着上一篇 &lt;a href=&quot;https://zyqvizzz.github.io/JS%E4%B8%AD%E7%9A%84%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E8%A1%A8--%E9%98%9F%E5%88%97/&quot;&gt;《JS中的栈、队列和链表 – 队列》&lt;/a&gt;的讨论，今天我们将用JS的方式实现栈。&lt;/p&gt;
&lt;h2 id=&quot;什么是栈？&quot;&gt;&lt;a href=&quot;#什么是栈？&quot; class=&quot;headerlink&quot; title=&quot;什么是栈？&quot;&gt;&lt;/a&gt;什么是栈？&lt;/h2&gt;&lt;p&gt;还是引用《JS高级编程》里的比喻来形容，栈就像叠盘子，一个一个往上叠，最后一个叠上去的，需要第一个拿出来。所以栈也是一个动态集合：新的元素被压入栈的最顶部；需要删除的元素将从栈的最顶部被弹出；删除的操作遵循LIFO（后进先出）的原则。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://zyqvizzz.github.io/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="http://zyqvizzz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JS中的数据结构：栈、队列和链表 -- 队列</title>
    <link href="http://zyqvizzz.github.io/JS%E4%B8%AD%E7%9A%84%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E8%A1%A8--%E9%98%9F%E5%88%97/"/>
    <id>http://zyqvizzz.github.io/JS中的栈、队列和链表--队列/</id>
    <published>2018-07-12T08:18:09.000Z</published>
    <updated>2018-08-14T10:34:13.776Z</updated>
    
    <content type="html"><![CDATA[<p>栈和队列是数据结构里的基本概念之一。所以今天讨论的内容是如何在JavaScript中实现一个队列。</p><h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><p>顾名思义，就是排队的意思。之前看《JS高级编程》时里面好像举了一个买电影票的例子，我们排队买票，第一个人买完了票从队伍的最前面离开，新来的人要站在队伍的最后一个。</p><p>所以，在数据结构语言中，队列是一个动态的集合：其中新元素将被插入到队列的末尾(入队 ENQUEUE)；并且要从队列的头部删除元素(出队 DEQUEUE)；同时EnQueue和DeQueue是队列结构需要支持的两个主要操作。</p><a id="more"></a><p>删除的操作基于FIFO(先进先出)原则，先一步入队的元素必须先一步出队。</p><p>举一个作业调度的例子。</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-5db375659deaf5ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="队列"></p><p>这样的调度方式确保了任何工作都不会被遗忘或者等待太久。</p><h2 id="如何在JS里使用队列"><a href="#如何在JS里使用队列" class="headerlink" title="如何在JS里使用队列"></a>如何在JS里使用队列</h2><p>在JS中实现Queue的最简单的方法是将数组作为容器存储。使用Array.shift()方法可以移除并返回第一个元素，简单但并不高效。因为：</p><ul><li>shift()的时间复杂度是O(n)，n是队列的长度，但是DeQueue()的目标运行时间应为O(1)</li><li>Array.prototype里的大部分操作的时间复杂度都是O(n)</li><li>数组是索引集合，所有的数据都被分配到内存中。如果队列过大，则每次更改都将移动大块内存以使用索引来保持数组可访问。</li></ul><p>从时间和准确性的角度上看，数组并不是最好的存储容器，那么有比数组更好的存储容器吗？对象。JS里的一切不都是对象吗？</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>队列的基本结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Queue()&#123;</span><br><span class="line">  // 声明一个对象作为队列的存储容器</span><br><span class="line">  // 声明头尾两端的索引值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>EnQueue的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnQueue: function(item)&#123;</span><br><span class="line">  // 将入队的值分配一个尾部索引</span><br><span class="line">  // 尾部的索引值递增</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DeQueue的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DeQueue: function()&#123;</span><br><span class="line">  // 检查队列是否为空</span><br><span class="line">  // 获取当前的头部索引指向的值</span><br><span class="line">  // 删除数组头部元素</span><br><span class="line">  // 将下一个索引变为头部索引</span><br><span class="line"></span><br><span class="line">  // 为空则重置, 确保头尾索引不会过大</span><br><span class="line"></span><br><span class="line">  // 返回删除的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> storage = &#123;&#125;,</span><br><span class="line">    top = <span class="number">0</span>,</span><br><span class="line">    end= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enQueue: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">      storage[end] = item;</span><br><span class="line">      end++;</span><br><span class="line">    &#125;,</span><br><span class="line">    deQueue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> size = end - top;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> item = storage[top];</span><br><span class="line">      <span class="keyword">delete</span> storage[top];</span><br><span class="line">      top++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (top === end)&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        end = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> end - top;</span><br><span class="line">    &#125;,</span><br><span class="line">    peek: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> storage[end - <span class="number">1</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> storage)&#123;</span><br><span class="line">        result.push(storage[key]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，访问Object的属性需要O(1)时间，因此EnQueue和DeQueue方法每个都将花费固定的时间，不会因队列大小的变化而变化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈和队列是数据结构里的基本概念之一。所以今天讨论的内容是如何在JavaScript中实现一个队列。&lt;/p&gt;
&lt;h2 id=&quot;什么是队列&quot;&gt;&lt;a href=&quot;#什么是队列&quot; class=&quot;headerlink&quot; title=&quot;什么是队列&quot;&gt;&lt;/a&gt;什么是队列&lt;/h2&gt;&lt;p&gt;顾名思义，就是排队的意思。之前看《JS高级编程》时里面好像举了一个买电影票的例子，我们排队买票，第一个人买完了票从队伍的最前面离开，新来的人要站在队伍的最后一个。&lt;/p&gt;
&lt;p&gt;所以，在数据结构语言中，队列是一个动态的集合：其中新元素将被插入到队列的末尾(入队 ENQUEUE)；并且要从队列的头部删除元素(出队 DEQUEUE)；同时EnQueue和DeQueue是队列结构需要支持的两个主要操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://zyqvizzz.github.io/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="http://zyqvizzz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>第零章 武库大火事件</title>
    <link href="http://zyqvizzz.github.io/%E6%AD%A6%E5%BA%93%E5%A4%A7%E7%81%AB%E4%BA%8B%E4%BB%B600/"/>
    <id>http://zyqvizzz.github.io/武库大火事件00/</id>
    <published>2018-06-18T06:18:09.000Z</published>
    <updated>2018-08-14T08:04:59.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>书三写，鱼成书，帝成鲁。<br>作：苏住</p></blockquote><h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><p>元康年间，一桩坊间流言在洛阳城里悄然流传。说陆公子身怀绝技，每至夜冷灯寒，便化身为江洋大盗，在城中兴风作浪。初次听说这个故事的人多半有两种反应，一些人不知道陆公子是谁，也从没在以往的奇闻传说里见过他的影子，他们被这个陌生的人物吸引，完全归功于说书客的妙笔生花；而另一小撮人，他们知道陆公子，甚至有人自称是他的朋友，这些人对故事将信将疑。在他们眼里，陆公子并不是神秘的江湖侠客，只是个无甚特别的平头百姓，住在洛阳城内某块不甚平整的泥土地里。这里以前没有过传说，以后也绝不会有。</p><a id="more"></a><p>在造访陆公子之前，我已在邻里们的耳传口授中对他的性格模样有了一些粗浅的感观。大概是这样一个人：一介书生，白净面皮，偏爱素色衣衫，样式多为腰窄袖宽的吴服旧制；有服散习惯，洛阳城内买不到他的方子，所以有专门为他供货的外地客商；自己酿酒，酒后行文，但未听说有公开发表于世的文章；不接受文人圈子的邀请，不参与任何形式的清议；起居不定，断绝交游，只有在节庆期间才偶尔现身于坊外的花灯庙会上，照旧孤身一人；更多能见到他的机会是找他写信–陆公子每逢初一，初十，二十这三日执笔，为邻居们代写家书，并象征性的收取少量钱帛。因此，尽管人们对他的生平知之甚少，他亦极少与人主动往来，但这丝毫不能抵消他在吴人坊里所获得的绝好名声。</p><p>“吴人坊，乃是洛阳城四夷坊之一，地处城东一隅，距离马市不远，从洛水桥出发步行赶往此地，脚程约半个时辰。三年前，也就是陆公子来到洛阳的第二年，他一头扎进吴人坊，从此与外界音信相绝。”</p><p>说书客的情报非常准确，我依照故事中的描述，很快便在这座此前闻所未闻的吴人坊中寻找到了陆公子的府邸——说是府邸，未免有些夸大之嫌，因为此时我不知该以陆公子的身份作为标准，还是该以眼前的客观事实作为依据——就暂且称之为屋邸吧。</p><p>他的屋邸很好认，是吴人坊里少数顶上有瓦的房子。单进单出，从外部的墙围构造推测，里面没有左右厢房，只有一间朝南的堂屋和一座相对宽敞的院落，堂屋左右是卧室和厨房；似乎唯独在门上多花了心思：院门两旁的一小段护墙高出围墙整体约五尺，向里斜收，和院门连接成为一个颇有礼让的梯形，这大概是为了让门檐和台阶不占用额外道路而特意做出的设计；门檐上没有多余的装饰，四平八稳，朴实而庄重，门前设有两级台阶，阶上间杂着几株错落有致的绣墩草，和坊里其他的民房相比，这里始终透着些文气，但又并不突兀。</p><p>不难发现，陆公子的住宅有一种均衡克制的气氛，甚至在规格上暗降一等，而之所以这么做，多半是出于他的友善性格，他不希望邻居们因为他的存在而感到不安。这是一种君子风度。所以，为了还以同样的礼数，在叩响陆家的院门之前，我在头脑中对陆公子的生平做了一次额外的整理：</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;书三写，鱼成书，帝成鲁。&lt;br&gt;作：苏住&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;壹&quot;&gt;&lt;a href=&quot;#壹&quot; class=&quot;headerlink&quot; title=&quot;壹&quot;&gt;&lt;/a&gt;壹&lt;/h3&gt;&lt;p&gt;元康年间，一桩坊间流言在洛阳城里悄然流传。说陆公子身怀绝技，每至夜冷灯寒，便化身为江洋大盗，在城中兴风作浪。初次听说这个故事的人多半有两种反应，一些人不知道陆公子是谁，也从没在以往的奇闻传说里见过他的影子，他们被这个陌生的人物吸引，完全归功于说书客的妙笔生花；而另一小撮人，他们知道陆公子，甚至有人自称是他的朋友，这些人对故事将信将疑。在他们眼里，陆公子并不是神秘的江湖侠客，只是个无甚特别的平头百姓，住在洛阳城内某块不甚平整的泥土地里。这里以前没有过传说，以后也绝不会有。&lt;/p&gt;
    
    </summary>
    
      <category term="小说" scheme="http://zyqvizzz.github.io/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
      <category term="假面生死簿" scheme="http://zyqvizzz.github.io/tags/%E5%81%87%E9%9D%A2%E7%94%9F%E6%AD%BB%E7%B0%BF/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习：使用loopback做邮箱验证</title>
    <link href="http://zyqvizzz.github.io/Node.js%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%BD%BF%E7%94%A8loopback%E5%81%9A%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81/"/>
    <id>http://zyqvizzz.github.io/Node.js学习：使用loopback做邮箱验证/</id>
    <published>2017-07-01T09:52:57.000Z</published>
    <updated>2018-08-14T07:11:16.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册用户"><a href="#注册用户" class="headerlink" title="注册用户"></a>注册用户</h2><p>LoopBack用户模型提供了注册新用户并确认其电子邮件地址的方法。您还可以使用loopback-component-passport模块将登录信息与Facebook，Google和其他第三方提供商集成。</p><a id="more"></a><h3 id="使用LoopBack用户模型注册用户"><a href="#使用LoopBack用户模型注册用户" class="headerlink" title="使用LoopBack用户模型注册用户"></a>使用LoopBack用户模型注册用户</h3><h4 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h4><p>a. 通过添加模型实例创建用户（注册用户），电子邮件和密码是唯一必需的属性。</p><p><strong>/server/boot/my-boot-script.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  var User = app.models.User;</span><br><span class="line">  User.create(&#123;email: &apos;foo@bar.com&apos;, password: &apos;bar&apos;&#125;, function(err, userInstance) &#123;</span><br><span class="line">    console.log(userInstance);</span><br><span class="line">  &#125;);</span><br><span class="line">  //...</span><br></pre></td></tr></table></figure><blockquote><p>注：如果/boot文件夹中没有这个js文件，可以自己新建一个<code>my-boot-script.js</code>。这个文件夹中脚本的作用是执行一些初始化的设置。默认情况下，运行引导脚本后，应用程序在启动时会自动执行该文件夹中的脚本。</p></blockquote><p>b. 使用POST /users接口创建一个新的用户实例，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type:application/json&quot;         \</span><br><span class="line">-d &apos;&#123;&quot;email&quot;: &quot;me@domain.com&quot;, &quot;password&quot;: &quot;secret&quot;&#125;&apos;   \</span><br><span class="line">http://localhost:3000/api/users</span><br></pre></td></tr></table></figure><h4 id="添加其他注册限制"><a href="#添加其他注册限制" class="headerlink" title="添加其他注册限制"></a>添加其他注册限制</h4><p>我们可能会在注册过程中添加方法，比如查看给定的用户名是否可用，或者是否已经注册了一个电子邮件地址。通常做法是在User对象上添加一个beforeRemote方法。</p><h4 id="验证电子邮件地址"><a href="#验证电子邮件地址" class="headerlink" title="验证电子邮件地址"></a>验证电子邮件地址</h4><p>通常，应用程序将要求用户在登录之前验证其电子邮件地址。所以我们需要向用户发送一封包含链接的电子邮件，来验证其地址。一旦用户点击链接，他们就会被重定向到网站的登录页面（“/”），并且将能够正常登录。</p><p>如果需要强制验证注册，请在server/model-config.json中将emailVerificationRequired用户模型属性设置为true;</p><p><strong>server/model-config.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;user&quot;: &#123;</span><br><span class="line">    &quot;dataSource&quot;: &quot;db&quot;,</span><br><span class="line">    &quot;public&quot;: true,</span><br><span class="line">    &quot;options&quot;: &#123;</span><br><span class="line">      &quot;emailVerificationRequired&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过REST，使用<code>GET /users/confirm</code>接口来验证用户的电子邮件地址。</p><p>此示例在User模型上创建了一个远程钩子，并在create()方法被调用之后执行。</p><p><strong>/common/models/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../../server/config.json'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//send verification email after registration</span></span><br><span class="line">  user.afterRemote(<span class="string">'create'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">context, userInstance, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt; user.afterRemote triggered'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">      type: <span class="string">'email'</span>,</span><br><span class="line">      to: userInstance.email,</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">'noreply@loopback.com'</span>,</span><br><span class="line">      subject: <span class="string">'Thanks for registering.'</span>,</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'../../server/views/verify.ejs'</span>),</span><br><span class="line">      redirect: <span class="string">'/verified'</span>,</span><br><span class="line">      user: user</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    userInstance.verify(options, <span class="function"><span class="keyword">function</span>(<span class="params">err, response, next</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'&gt; verification email sent:'</span>, response);</span><br><span class="line"></span><br><span class="line">      context.res.render(<span class="string">'response'</span>, &#123;</span><br><span class="line">        title: <span class="string">'Signed up successfully'</span>,</span><br><span class="line">        content: <span class="string">'Please check your email and click on the verification link '</span> -</span><br><span class="line">            <span class="string">'before logging in.'</span>,</span><br><span class="line">        redirectTo: <span class="string">'/'</span>,</span><br><span class="line">        redirectToLinkText: <span class="string">'Log in'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>有关完整的示例，请参阅<a href="https://github.com/strongloop/loopback-example-user-management" target="_blank" rel="noopener">loopback-example-user-management</a>中的user.js。</p><p>接下来，我们将以<code>loopback-example-user-management</code>为例，详细地完成验证邮箱的过程。</p><p>首先需要在<code>/server/model-config.json</code>里配置邮件数据源。</p><p><strong>/server/model-config.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// ···</span><br><span class="line">&quot;Role&quot;: &#123;</span><br><span class="line">  &quot;dataSource&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;public&quot;: false</span><br><span class="line">&#125;,</span><br><span class="line">&quot;Email&quot;: &#123;</span><br><span class="line">  &quot;dataSource&quot;: &quot;emailDs&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;user&quot;: &#123;</span><br><span class="line">  &quot;dataSource&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;public&quot;: true,</span><br><span class="line">  &quot;options&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>接下来配置<code>/server/datasources.json</code>文件，即配置邮件数据源，示例项目中的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;emailDs&quot;: &#123;</span><br><span class="line">  &quot;name&quot;: &quot;emailDs&quot;,</span><br><span class="line">  &quot;connector&quot;: &quot;mail&quot;,</span><br><span class="line">  &quot;transports&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;smtp&quot;,</span><br><span class="line">      &quot;host&quot;: &quot;smtp.gmail.com&quot;,</span><br><span class="line">      &quot;secure&quot;: true,</span><br><span class="line">      &quot;port&quot;: 465,</span><br><span class="line">      &quot;tls&quot;: &#123;</span><br><span class="line">        &quot;rejectUnauthorized&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;auth&quot;: &#123;</span><br><span class="line">        &quot;user&quot;: &quot;email@address.com&quot;,</span><br><span class="line">        &quot;pass&quot;: &quot;password&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要改两个地方，一个是host要改成你指定的源地址，如果是gmail邮箱，就写成smtp.gmail.com，如果是qq邮箱，就改成smtp.qq.com。另外一个改动是auth中的user和pass，这里写的是用于发送邮件的邮箱的邮箱名和密码，也就是设置用这个邮箱给注册的用户邮箱发送邮件。</p><p>现在运行项目，打开<a href="http://localhost:3000/explorer" target="_blank" rel="noopener">http://localhost:3000/explorer</a>，我们现在在API explorer中注册一个用户。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-a0c383cf1f8ae6f6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-21f7a85f0a4f6835.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>它将返回一个提示网页，这表示验证邮件已经成功发到了注册的邮箱中。</p><p>打开邮箱，激活链接，再次登录即可成功。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-2a79dad4442a12a8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>现在回到explorer，使用登录接口。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-f66320234c58e36e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-30fee2b86137cf76.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>返回的参数中，id为返回的token，ttl为token默认的有效周期，可以手动修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注册用户&quot;&gt;&lt;a href=&quot;#注册用户&quot; class=&quot;headerlink&quot; title=&quot;注册用户&quot;&gt;&lt;/a&gt;注册用户&lt;/h2&gt;&lt;p&gt;LoopBack用户模型提供了注册新用户并确认其电子邮件地址的方法。您还可以使用loopback-component-passport模块将登录信息与Facebook，Google和其他第三方提供商集成。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Node.JS" scheme="http://zyqvizzz.github.io/tags/Node-JS/"/>
    
      <category term="LoopBack" scheme="http://zyqvizzz.github.io/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习：使用Loopback3.0构建应用程序（二）</title>
    <link href="http://zyqvizzz.github.io/Node.js%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%BD%BF%E7%94%A8Loopback3.0%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://zyqvizzz.github.io/Node.js学习：使用Loopback3.0构建应用程序（二）/</id>
    <published>2017-06-23T10:12:57.000Z</published>
    <updated>2018-08-14T07:11:16.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、咖啡店点评应用"><a href="#一、咖啡店点评应用" class="headerlink" title="一、咖啡店点评应用"></a>一、咖啡店点评应用</h2><h3 id="应用概述"><a href="#应用概述" class="headerlink" title="应用概述"></a>应用概述</h3><p>咖啡店点评是一个网站，您可以用来发布咖啡店的评论。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-8162aa3006d9d9bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这个应用程序用到了两个不同的数据源：它会将评论者数据存储在MySQL数据库中，并把咖啡店和评论数据存储在MongoDB数据库中。</p><a id="more"></a><p>这个应用有三个数据模型：</p><ul><li>CoffeeShop（这个模型我们已经在上一步中定义好了）</li><li>Review</li><li>Reviewer</li></ul><p>它们有如下关系：</p><ul><li>一个CoffeeShop拥有多个review</li><li>一个CoffeeShop拥有多个reviewer</li><li>一个review属于一个CoffeeShop</li><li>一个review属于一个reviewer</li><li>一个reviewer拥有多个review</li></ul><p>一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过ACLs指定基本规则和权限：</p><ul><li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li><li>任何人都可以注册为用户，然后能够登录或者注销。</li><li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改一开始选择的咖啡店。</li></ul><h2 id="二、创建新的数据源"><a href="#二、创建新的数据源" class="headerlink" title="二、创建新的数据源"></a>二、创建新的数据源</h2><h3 id="添加一个新的数据源"><a href="#添加一个新的数据源" class="headerlink" title="添加一个新的数据源"></a>添加一个新的数据源</h3><p>除了将API连接到上一步创建的MySQL数据源之外，现在还需要添加一个MongoDB数据源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb datasource</span><br></pre></td></tr></table></figure><p>出现提示时，回复如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? Enter the data-source name: mongoDs</span><br><span class="line">? Select the connector for mongoDs: MongoDB (supported by StrongLoop)</span><br></pre></td></tr></table></figure><p>接下来输入一些数据源设置，如主机，端口，用户，密码和数据库名称，然后安装数据库连接器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? Enter the datasource name: mongodb</span><br><span class="line">? Select the connector for mongodb: MongoDB (supported by StrongLoop)</span><br><span class="line">? Connection String url to override other settings (eg: mongodb://username:password@hostname:port/database):</span><br><span class="line">? host: localhost</span><br><span class="line">? port: 27017</span><br><span class="line">? user: demo</span><br><span class="line">? password: ****</span><br><span class="line">? database: demo</span><br><span class="line">? Install loopback-connector-mongodb@^1.4 Yes</span><br></pre></td></tr></table></figure><p>数据库连接器可以使用npm自行安装，数据源设置也可以手动添加到<code>server/ datasources.json</code>中。</p><p>安装MongoDB连接器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save loopback-connector-mongodb</span><br></pre></td></tr></table></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p>在<code>server/datasources.json</code>中配置新的数据源。</p><p><strong>server/datasources.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;mongoDs&quot;: &#123;</span><br><span class="line">  &quot;name&quot;: &quot;mongoDs&quot;,</span><br><span class="line">  &quot;connector&quot;: &quot;mongodb&quot;,</span><br><span class="line">  &quot;host&quot;: &quot;demo.strongloop.com&quot;,</span><br><span class="line">  &quot;port&quot;: 27017,</span><br><span class="line">  &quot;database&quot;: &quot;getting_started_intermediate&quot;,</span><br><span class="line">  &quot;username&quot;: &quot;demo&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;L00pBack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、添加新的数据模型"><a href="#三、添加新的数据模型" class="headerlink" title="三、添加新的数据模型"></a>三、添加新的数据模型</h2><h3 id="定义Review数据模型"><a href="#定义Review数据模型" class="headerlink" title="定义Review数据模型"></a>定义Review数据模型</h3><p>输入：</p><figure class="highlight plain"><figcaption><span>model```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">出现提示时，输入或选择以下内容：</span><br><span class="line"></span><br><span class="line">* Model name：Review</span><br><span class="line">* Data source: mongoDs (mongodb)</span><br><span class="line">* Base class: Use the down-arrow key to select PersistedModel.</span><br><span class="line">* Expose Reviewer via the REST API? Press RETURN to accept the default, Yes.</span><br><span class="line">* Custom plural form (used to build REST URL):  Press RETURN to accept the default, Yes.</span><br><span class="line">* Common model or server only: Press RETURN to accept the default, common model.</span><br><span class="line"></span><br><span class="line">然后根据提示加入以下属性。</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;Property name&lt;/th&gt;</span><br><span class="line">&lt;th&gt;Property type&lt;/th&gt;</span><br><span class="line">&lt;th&gt;Required?&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt; date &lt;/td&gt;</span><br><span class="line">&lt;td&gt; date &lt;/td&gt;</span><br><span class="line">&lt;td&gt; y &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt; rating &lt;/td&gt;</span><br><span class="line">&lt;td&gt; number &lt;/td&gt;</span><br><span class="line">&lt;td&gt; n &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt; comments &lt;/td&gt;</span><br><span class="line">&lt;td&gt; string &lt;/td&gt;</span><br><span class="line">&lt;td&gt; y &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">### 定义Reviewer数据模型</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">```lb model</span><br></pre></td></tr></table></figure><p>出现提示时，输入或选择以下内容：</p><ul><li><strong>Model name</strong>: Reviewer</li><li><strong>Data source</strong>: mongoDs (mongodb)</li><li><strong>Base class</strong>: 选择User.</li><li><strong>Expose Reviewer via the REST API?</strong>: 选择默认选项，yes</li><li><strong>Custom plural form (used to build REST URL)</strong>: 选择默认选项，yes</li></ul><p>接下来不需要给Reviewer添加任何属性，它们都是从基本的用户模型继承下来的。</p><h3 id="更新启动脚本，添加一些原始数据"><a href="#更新启动脚本，添加一些原始数据" class="headerlink" title="更新启动脚本，添加一些原始数据"></a>更新启动脚本，添加一些原始数据</h3><p>在启动脚本<code>server/boot/create-sample-models.js</code>中添加一些代码，这个启动脚本有如下几个功能：</p><ul><li>createCoffeeShops()为CoffeeShop模型创建一个MySQL表，并将数据添加到表中。</li><li>createReviewers()使用自动迁移在MongoDB中创建Reviewer数据结构，并向其添加数据。</li><li>createReviews()使用自动迁移在MongoDB中创建评论数据结构，并向其添加数据。</li></ul><p><strong>server/boot/create-sample-models.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">var async = require(&apos;async&apos;);</span><br><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  //data sources</span><br><span class="line">  var mongoDs = app.dataSources.mongoDs; // &apos;name&apos; of your mongo connector, you can find it in datasource.json</span><br><span class="line">  var mysqlDs = app.dataSources.mysqlDs;</span><br><span class="line">  //create all models</span><br><span class="line">  async.parallel(&#123;</span><br><span class="line">    reviewers: async.apply(createReviewers),</span><br><span class="line">    coffeeShops: async.apply(createCoffeeShops),</span><br><span class="line">  &#125;, function(err, results) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    createReviews(results.reviewers, results.coffeeShops, function(err) &#123;</span><br><span class="line">      console.log(&apos;&gt; models created sucessfully&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  //create reviewers</span><br><span class="line">  function createReviewers(cb) &#123;</span><br><span class="line">    mongoDs.automigrate(&apos;Reviewer&apos;, function(err) &#123;</span><br><span class="line">      if (err) return cb(err);</span><br><span class="line">      var Reviewer = app.models.Reviewer;</span><br><span class="line">      Reviewer.create([&#123;</span><br><span class="line">        email: &apos;foo@bar.com&apos;,</span><br><span class="line">        password: &apos;foobar&apos;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        email: &apos;john@doe.com&apos;,</span><br><span class="line">        password: &apos;johndoe&apos;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        email: &apos;jane@doe.com&apos;,</span><br><span class="line">        password: &apos;janedoe&apos;</span><br><span class="line">      &#125;], cb);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  //create coffee shops</span><br><span class="line">  function createCoffeeShops(cb) &#123;</span><br><span class="line">    mysqlDs.automigrate(&apos;CoffeeShop&apos;, function(err) &#123;</span><br><span class="line">      if (err) return cb(err);</span><br><span class="line">      var CoffeeShop = app.models.CoffeeShop;</span><br><span class="line">      CoffeeShop.create([&#123;</span><br><span class="line">        name: &apos;Bel Cafe&apos;,</span><br><span class="line">        city: &apos;Vancouver&apos;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        name: &apos;Three Bees Coffee House&apos;,</span><br><span class="line">        city: &apos;San Mateo&apos;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        name: &apos;Caffe Artigiano&apos;,</span><br><span class="line">        city: &apos;Vancouver&apos;</span><br><span class="line">      &#125;, ], cb);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  //create reviews</span><br><span class="line">  function createReviews(reviewers, coffeeShops, cb) &#123;</span><br><span class="line">    mongoDs.automigrate(&apos;Review&apos;, function(err) &#123;</span><br><span class="line">      if (err) return cb(err);</span><br><span class="line">      var Review = app.models.Review;</span><br><span class="line">      var DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;</span><br><span class="line">      Review.create([&#123;</span><br><span class="line">        date: Date.now() - (DAY_IN_MILLISECONDS * 4),</span><br><span class="line">        rating: 5,</span><br><span class="line">        comments: &apos;A very good coffee shop.&apos;,</span><br><span class="line">        publisherId: reviewers[0].id,</span><br><span class="line">        coffeeShopId: coffeeShops[0].id,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: Date.now() - (DAY_IN_MILLISECONDS * 3),</span><br><span class="line">        rating: 5,</span><br><span class="line">        comments: &apos;Quite pleasant.&apos;,</span><br><span class="line">        publisherId: reviewers[1].id,</span><br><span class="line">        coffeeShopId: coffeeShops[0].id,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: Date.now() - (DAY_IN_MILLISECONDS * 2),</span><br><span class="line">        rating: 4,</span><br><span class="line">        comments: &apos;It was ok.&apos;,</span><br><span class="line">        publisherId: reviewers[1].id,</span><br><span class="line">        coffeeShopId: coffeeShops[1].id,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: Date.now() - (DAY_IN_MILLISECONDS),</span><br><span class="line">        rating: 4,</span><br><span class="line">        comments: &apos;I go here everyday.&apos;,</span><br><span class="line">        publisherId: reviewers[2].id,</span><br><span class="line">        coffeeShopId: coffeeShops[2].id,</span><br><span class="line">      &#125;], cb);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四、定义模型的关系"><a href="#四、定义模型的关系" class="headerlink" title="四、定义模型的关系"></a>四、定义模型的关系</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>LoopBack支持许多不同类型的模型关系：BelongsTo, HasMany, HasManyThrough, and HasAndBelongsToMany等等。</p><p>在“咖啡店评论”应用程序中，有以下几种关系：</p><ul><li>一个CoffeeShop拥有多个review</li><li>一个CoffeeShop拥有多个reviewer</li><li>一个review属于一个CoffeeShop</li><li>一个review属于一个reviewer</li><li>一个reviewer拥有多个review</li></ul><h3 id="定义关系"><a href="#定义关系" class="headerlink" title="定义关系"></a>定义关系</h3><p>现在，我们将使用<code>lb relation</code>来定义这些模型之间的关系。</p><p><strong>一个CoffeeShop拥有多个review</strong>，没有中间模型和外键。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to create the relationship from: CoffeeShop</span><br><span class="line">? Relation type: has many</span><br><span class="line">? Choose a model to create a relationship with: Review</span><br><span class="line">? Enter the property name for the relation: reviews</span><br><span class="line">? Optionally enter a custom foreign key:</span><br><span class="line">? Require a through model? No</span><br></pre></td></tr></table></figure><p><strong>一个CoffeeShop拥有多个reviewer</strong>，没有中间模型和外键</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to create the relationship from: CoffeeShop</span><br><span class="line">? Relation type: has many</span><br><span class="line">? Choose a model to create a relationship with: Reviewer</span><br><span class="line">? Enter the property name for the relation: reviewers</span><br><span class="line">? Optionally enter a custom foreign key:</span><br><span class="line">? Require a through model? No</span><br></pre></td></tr></table></figure><p><strong>一个review属于一个CoffeeShop</strong>，没有外键。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to create the relationship from: CoffeeShop</span><br><span class="line">? Relation type: has many</span><br><span class="line">? Choose a model to create a relationship with: Reviewer</span><br><span class="line">? Enter the property name for the relation: reviewers</span><br><span class="line">? Optionally enter a custom foreign key:</span><br><span class="line">? Require a through model? No</span><br></pre></td></tr></table></figure><p><strong>一个review属于一个reviewer</strong>，外键是<code>publisherId</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to create the relationship from: Review</span><br><span class="line">? Relation type: belongs to</span><br><span class="line">? Choose a model to create a relationship with: Reviewer</span><br><span class="line">? Enter the property name for the relation: reviewer</span><br><span class="line">? Optionally enter a custom foreign key: publisherId</span><br></pre></td></tr></table></figure><p><strong>一个reviewer拥有多个review</strong>，外键是<code>publisherId</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to create the relationship from: Reviewer</span><br><span class="line">? Relation type: has many</span><br><span class="line">? Choose a model to create a relationship with: Review</span><br><span class="line">? Enter the property name for the relation: reviews</span><br><span class="line">? Optionally enter a custom foreign key: publisherId</span><br><span class="line">? Require a through model? No</span><br></pre></td></tr></table></figure><h3 id="查看JSON模型文件"><a href="#查看JSON模型文件" class="headerlink" title="查看JSON模型文件"></a>查看JSON模型文件</h3><p>现在，查看<code>common/models/review.json</code>。你应该会看到这些：</p><p><strong>common/models/review.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;relations&quot;: &#123;</span><br><span class="line">  &quot;coffeeShop&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class="line">    &quot;model&quot;: &quot;CoffeeShop&quot;,</span><br><span class="line">    &quot;foreignKey&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;reviewer&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class="line">    &quot;model&quot;: &quot;Reviewer&quot;,</span><br><span class="line">    &quot;foreignKey&quot;: &quot;publisherId&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>同样，其他的json文件中应该有如下代码：</p><p><strong>common/models/reviewer.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;relations&quot;: &#123;</span><br><span class="line">  &quot;reviews&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class="line">    &quot;model&quot;: &quot;Review&quot;,</span><br><span class="line">    &quot;foreignKey&quot;: &quot;publisherId&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>common/models/coffee-shop.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;relations&quot;: &#123;</span><br><span class="line">  &quot;reviews&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class="line">    &quot;model&quot;: &quot;Review&quot;,</span><br><span class="line">    &quot;foreignKey&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;reviewers&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class="line">    &quot;model&quot;: &quot;Reviewer&quot;,</span><br><span class="line">    &quot;foreignKey&quot;: &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="五、定义权限控制"><a href="#五、定义权限控制" class="headerlink" title="五、定义权限控制"></a>五、定义权限控制</h2><h3 id="权限控制简介"><a href="#权限控制简介" class="headerlink" title="权限控制简介"></a>权限控制简介</h3><p>loopback应用通过模型访问数据，因此控制对数据的访问意味着对模型进行权限的控制：也就是说，指定什么角色可以在模型上执行读取和写入数据的方法。loopback权限控制由权限控制列表或ACL决定。</p><p>接下来，我们将为Review模型设置权限控制。</p><p>权限控制应执行以下规则：</p><ul><li>任何人都可以阅读评论。但是创建、编辑和删除的操作必须在登录之后才有权限。</li><li>任何人都可以注册为用户，可以登录和登出。</li><li>登录用户可以创建新的评论，编辑或删除自己的评论。然而，他们不能修改咖啡店的评论。</li></ul><h3 id="定义权限控制"><a href="#定义权限控制" class="headerlink" title="定义权限控制"></a>定义权限控制</h3><p>这次我们使用lb的acl子命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lb acl</span><br></pre></td></tr></table></figure><p>首先，<strong>拒绝所有人操作所有接口</strong>，这通常是定义ACL的起点，因为您可以选择性地允许特定操作的访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to apply the ACL entry to: (all existing models)</span><br><span class="line">? Select the ACL scope: All methods and properties</span><br><span class="line">? Select the access type: All (match all types)</span><br><span class="line">? Select the role: All users</span><br><span class="line">? Select the permission to apply: Explicitly deny access</span><br></pre></td></tr></table></figure><p><strong>现在允许所有人对reviews进行读操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to apply the ACL entry to: Review</span><br><span class="line">? Select the ACL scope: All methods and properties</span><br><span class="line">? Select the access type: Read</span><br><span class="line">? Select the role: All users</span><br><span class="line">? Select the permission to apply: Explicitly grant access</span><br></pre></td></tr></table></figure><p><strong>允许通过身份验证的用户对coffeeshops进行读操作</strong>，也就是说，已登录的用户可以浏览所有咖啡店。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to apply the ACL entry to: CoffeeShop</span><br><span class="line">? Select the ACL scope: All methods and properties</span><br><span class="line">? Select the access type: Read</span><br><span class="line">? Select the role: Any authenticated user</span><br><span class="line">? Select the permission to apply: Explicitly grant access</span><br></pre></td></tr></table></figure><p><strong>允许经过身份验证的用户对reviews进行写操作</strong>，也就是说，已登录的用户可以添加一条评论。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Select the model to apply the ACL entry to: Review</span><br><span class="line">? Select the ACL scope: A single method</span><br><span class="line">? Enter the method name: create</span><br><span class="line">? Select the role: Any authenticated user</span><br><span class="line">? Select the permission to apply: Explicitly grant access</span><br></pre></td></tr></table></figure><p><strong>使review的作者有权限（其“所有者”）对其进行任何更改</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ lb acl</span><br><span class="line">? Select the model to apply the ACL entry to: Review</span><br><span class="line">? Select the ACL scope: All methods and properties</span><br><span class="line">? Select the access type: Write</span><br><span class="line">? Select the role: The user owning the object</span><br><span class="line">? Select the permission to apply: Explicitly grant access</span><br></pre></td></tr></table></figure><h3 id="查看review-json文件"><a href="#查看review-json文件" class="headerlink" title="查看review.json文件"></a>查看review.json文件</h3><p>完成上述步骤，此时的<code>common/models/review.json</code>中的ACL部分应如下所示：</p><h2 id="六、定义一个远程钩子"><a href="#六、定义一个远程钩子" class="headerlink" title="六、定义一个远程钩子"></a>六、定义一个远程钩子</h2><h3 id="远程钩子介绍"><a href="#远程钩子介绍" class="headerlink" title="远程钩子介绍"></a>远程钩子介绍</h3><p>远程钩子（remote hook）是一个在远程方法（自定义远程方法或内置CRUD方法）之前或之后执行的功能。</p><p>在这个例子中，我们将定义一个远程钩子，每当在Review模型上调用create()方法时（在创建新的评论时），它将被调用。</p><p>您可以定义两种远程钩子：</p><ul><li><code>beforeRemote()</code>在远程方法之前运行。</li><li><code>afterRemote()</code>在远程方法之后运行。</li></ul><p>在这两种情况下，有两个参数可以供我们使用：一个与要钩子函数的远程方法匹配的字符串，和一个回调函数。</p><h3 id="创建一个远程钩子"><a href="#创建一个远程钩子" class="headerlink" title="创建一个远程钩子"></a>创建一个远程钩子</h3><p>这里，您将在review模型中定义一个远程钩子，具体来说是<code>Review.beforeRemote</code>。</p><p>修改<code>common/models/review.js</code>，并添加以下代码：</p><p><strong>common/models/review.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(Review) &#123;</span><br><span class="line">  Review.beforeRemote(&apos;create&apos;, function(context, user, next) &#123;</span><br><span class="line">    context.args.data.date = Date.now();</span><br><span class="line">    context.args.data.publisherId = context.req.accessToken.userId;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在创建Review模型的新实例之前调用此函数。The code:</p><ul><li>设置publisherId为请求中的userId</li><li>设置日期为当前日期。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、咖啡店点评应用&quot;&gt;&lt;a href=&quot;#一、咖啡店点评应用&quot; class=&quot;headerlink&quot; title=&quot;一、咖啡店点评应用&quot;&gt;&lt;/a&gt;一、咖啡店点评应用&lt;/h2&gt;&lt;h3 id=&quot;应用概述&quot;&gt;&lt;a href=&quot;#应用概述&quot; class=&quot;headerlink&quot; title=&quot;应用概述&quot;&gt;&lt;/a&gt;应用概述&lt;/h3&gt;&lt;p&gt;咖啡店点评是一个网站，您可以用来发布咖啡店的评论。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3396508-8162aa3006d9d9bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个应用程序用到了两个不同的数据源：它会将评论者数据存储在MySQL数据库中，并把咖啡店和评论数据存储在MongoDB数据库中。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Node.JS" scheme="http://zyqvizzz.github.io/tags/Node-JS/"/>
    
      <category term="LoopBack" scheme="http://zyqvizzz.github.io/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习：使用Loopback3.0构建应用程序（一）</title>
    <link href="http://zyqvizzz.github.io/Node.js%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%BD%BF%E7%94%A8Loopback3.0%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://zyqvizzz.github.io/Node.js学习：使用Loopback3.0构建应用程序（一）/</id>
    <published>2017-06-20T14:12:57.000Z</published>
    <updated>2018-08-14T07:11:16.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><blockquote><p>安装LoopBack工具来创建和开发LoopBack 3.0应用程序。</p></blockquote><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node下载地址</a></p><h3 id="安装loopback工具"><a href="#安装loopback工具" class="headerlink" title="安装loopback工具"></a>安装loopback工具</h3><p>虽然你可以自己从头开始编写一个LoopBack应用程序，但是安装一个LoopBack CLI工具能够使它更容易入门。它将构建应用程序的基本结构，然后您可以根据需要进行自定义。</p><p>LoopBack提供了两个工具的选项：<a href="http://loopback.io/doc/en/lb3/Installation.html#install-loopback-cli-tool" target="_blank" rel="noopener">LoopBack CLI</a> 和 <a href="http://loopback.io/doc/en/lb3/Installation.html#install-ibm-api-connect-developer-toolkit" target="_blank" rel="noopener">IBM API Connect开发工具包</a>，这里可以选择LoopBack CLI来进行应用程序的构建。</p><a id="more"></a><h4 id="安装Loopback-CLI工具"><a href="#安装Loopback-CLI工具" class="headerlink" title="安装Loopback CLI工具"></a>安装Loopback CLI工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g loopback-cli</span><br></pre></td></tr></table></figure><p>这一步将安装 <code>lb</code> 命令行工具，用于构建和修改LoopBack应用程序。</p><h3 id="安装更新"><a href="#安装更新" class="headerlink" title="安装更新"></a>安装更新</h3><p>如果之前安装过strongloop，需要进行一次版本的更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure><p>如果遇到任何问题，可以尝试卸载重装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g strongloop</span><br><span class="line">npm cache clear</span><br><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure><h2 id="二、使用Loopback创建一个应用"><a href="#二、使用Loopback创建一个应用" class="headerlink" title="二、使用Loopback创建一个应用"></a>二、使用Loopback创建一个应用</h2><h3 id="创建一个简单的API"><a href="#创建一个简单的API" class="headerlink" title="创建一个简单的API"></a>创建一个简单的API</h3><p>首先使用loopback-cli创建一个新的应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb</span><br></pre></td></tr></table></figure><p>LoopBack应用生成器将提示您输入应用程序的名称。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">     _-----_</span><br><span class="line">    |       |    .--------------------------.</span><br><span class="line">    |--(o)--|    |  Let&apos;s create a LoopBack |</span><br><span class="line">   `---------´   |       application!       |</span><br><span class="line">    ( _´U`_ )    &apos;--------------------------&apos;</span><br><span class="line">    /___A___\</span><br><span class="line">     |  ~  |</span><br><span class="line">   __&apos;.___.&apos;__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line">[?] What&apos;s the name of your application? loopback-getting-started</span><br><span class="line">[?] Enter name of the directory to contain the project: loopback-getting-started</span><br></pre></td></tr></table></figure><blockquote><p>这里可以替换成任何你喜欢的名字，本教程使用了官方文档中的名称：loopback-getting-started。</p></blockquote><p>接下来cli工具会询问要创建什么样的应用程序：可以选择 <code>hello-world</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? What kind of application do you have in mind? (Use arrow keys)</span><br><span class="line">  api-server (A LoopBack API server with local User auth)</span><br><span class="line">  empty-server (An empty LoopBack API, without any configured models or datasources)</span><br><span class="line">❯ hello-world (A project containing a controller, including a single vanilla Message and</span><br><span class="line">    a single remote method)</span><br><span class="line">  notes (A project containing a basic working example, including a memory database)</span><br></pre></td></tr></table></figure><p>然后，生成器将在其构建应用程序时创建如下信息，包括：</p><ol><li>初始化项目的文件夹结构。</li><li>创建默认的JSON文件。</li><li>创建默认的JavaScript文件。</li><li>下载并安装依赖节点模块（省去手动安装npm的一步）。</li></ol><h3 id="创建一个数据模型"><a href="#创建一个数据模型" class="headerlink" title="创建一个数据模型"></a>创建一个数据模型</h3><p>完成了初始项目的构建，接下来我们将创建一个自动具有REST API接口的CoffeeShop模型。</p><p>进入应用程序目录，然后运行LoopBack模型生成器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb model</span><br></pre></td></tr></table></figure><p>生成器将提示输入数据模型的名称，输入CoffeeShop：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Enter the model name: CoffeeShop</span><br></pre></td></tr></table></figure><p>它会询问您是否要将模型附加到已经一些已经定义的数据源。 此时，只有默认的内存数据源可用。按Enter键选择它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[?] Select the data-source to attach CoffeeShop to: (Use arrow keys)</span><br><span class="line">❯ db (memory)</span><br></pre></td></tr></table></figure><p>然后，生成器将提示您使用基类作为模型。由于您在最终会把该模型连接到数据库中的持久数据源，所以这里选择PersistedModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[?] Select model&apos;s base class: (Use arrow keys)</span><br><span class="line">  Model</span><br><span class="line">❯ PersistedModel</span><br><span class="line">  ACL</span><br><span class="line">  AccessToken</span><br><span class="line">  Application</span><br><span class="line">  Change</span><br><span class="line">  Checkpoint</span><br></pre></td></tr></table></figure><p>PersistedModel是连接到持久性数据源（如数据库）的所有模型的基础对象，也就是基类。</p><blockquote><p>关于Loopback中的模型：</p><p>模型是LoopBack的核心，表示如数据库或其他后端服务（REST，SOAP等）等后端数据源。 LoopBack模型是具有Node和REST API的JavaScript对象。</p><p>LoopBack的一个关键功能是当您定义一个模型时，它将自动附带预定义的REST API，并具有完整的创建，读取，更新和删除操作。</p><p>Basic模型对象具有添加钩子和验证数据的方法。其他模型对象都“继承”它。模型具有继承层次结构，如下图所示：将模型附加到持久性数据源时，它将成为具有创建，检索，更新和删除操作的连接模型。 LoopBack的内置模型继承自它。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-f7230f84f992a43d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="model的继承关系"></p></blockquote><p>LoopBack的强大优点之一是它自动为您的模型生成REST API。生成器将询问您是否要公开此REST API。 </p><p>再次输入Enter接受默认值，并通过REST暴露CoffeeShop模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Expose CoffeeShop via the REST API? (Y/n) Y</span><br></pre></td></tr></table></figure><p>LoopBack使用模型名称的复数自动创建与模型关联的REST路由。默认情况下，它将您的名称复数（通过添加“s”），但是如果需要，您可以指定自定义复数形式。</p><p>按Enter接受默认复数形式（CoffeeShops）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Custom plural form (used to build REST URL):</span><br></pre></td></tr></table></figure><p>接下来，系统会询问您是要仅在服务器上创建模型，还是在<code>/common</code>目录中创建模型，这些模型可能由服务器端口和客户端LoopBack API使用。选择common，即使在这个应用程序中，你只使用服务器端模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Common model or server only?</span><br><span class="line">❯ common</span><br><span class="line">  server</span><br></pre></td></tr></table></figure><p>每个模型都有属性。现在，您将为CoffeeShop模型定义一个属性“name”。</p><p>选择字符串作为属性类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Let&apos;s add some CoffeeShop properties now.</span><br><span class="line">Enter an empty property name when done.</span><br><span class="line">[?] Property name: name</span><br><span class="line">   invoke   loopback:property</span><br><span class="line">[?] Property type: (Use arrow keys)</span><br><span class="line">❯ string</span><br><span class="line">  number</span><br><span class="line">  boolean</span><br><span class="line">  object</span><br><span class="line">  array</span><br><span class="line">  date</span><br><span class="line">  buffer</span><br><span class="line">  geopoint</span><br><span class="line">  (other)</span><br></pre></td></tr></table></figure><p>每个属性可以是可选的或必需的。输入 <code>y</code> 以将 <code>name</code> 设为必需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Required? (y/N)</span><br></pre></td></tr></table></figure><p>然后系统会提示您输入属性的默认值;按Enter键不设默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Default value[leave blank for none]:</span><br></pre></td></tr></table></figure><p>然后，系统会提示您添加其他属性。按照提示添加名为“city”的必需属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Let&apos;s add another CoffeeShop property.</span><br><span class="line">? Property name: city</span><br><span class="line">? Property type: string</span><br><span class="line">? Required? Yes</span><br><span class="line">? Default value[leave blank for none]:</span><br></pre></td></tr></table></figure><p>当提示输入下一个属性的名称时，按Enter键结束模型创建过程。</p><p>模型生成器将在应用程序的 <code>common / models</code> 目录中创建两个定义模型的文件： <code>coffee-shop.json</code> 和 <code>coffee-shop.js</code>。</p><blockquote><p>LoopBack模型生成器自动将驼峰式的模型名称（例如MyModel）转换为小写字母名称（my-model）。例如，如果您使用模型生成器创建一个名为“FooBar”的模型，它将在 <code>common/models</code> 中创建<code>foo-bar.json</code>和<code>foo-bar.js</code>文件。但是，模型名称（“FooBar”）将通过模型的名称属性进行保留。</p></blockquote><h3 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">...</span><br><span class="line">Browse your REST API at http://0.0.0.0:3000/explorer</span><br><span class="line">Web server listening at: http://0.0.0.0:3000/</span><br></pre></td></tr></table></figure><p>现在打开你的浏览器到<a href="http://0.0.0.0:3000/explorer" target="_blank" rel="noopener">http://0.0.0.0:3000/explorer</a> 或<a href="http://localhost:3000/explorer" target="_blank" rel="noopener">http://localhost:3000/explorer</a> 。您将看到StrongLoop API资源管理器：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-70980b142c629bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>通过使用LoopBack的一系列简单的步骤，您创建了一个CoffeeShop模型并为它设置了一些属性，然后通过REST进行公开。</p><h2 id="三、使用API​​资源管理器"><a href="#三、使用API​​资源管理器" class="headerlink" title="三、使用API​​资源管理器"></a>三、使用API​​资源管理器</h2><h3 id="运行API​​资源管理器"><a href="#运行API​​资源管理器" class="headerlink" title="运行API​​资源管理器"></a>运行API​​资源管理器</h3><p>运行应用: <code>node .</code></p><p>转到 <a href="http://localhost:3000/explorer" target="_blank" rel="noopener">http://localhost:3000/explorer</a>。您将看到StrongLoop API资源管理器中显示了该应用程序的两个模型：User和CoffeeShop：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-70980b142c629bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="探索CoffeeShop模型"><a href="#探索CoffeeShop模型" class="headerlink" title="探索CoffeeShop模型"></a>探索CoffeeShop模型</h3><p>除了CoffeeShop模型之外，Loopback还会为每个应用程序生成默认的用户模型及其接口。</p><p>展开CoffeeShops之后，可以看到它所有的API接口。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-68483e8526641f7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大致浏览这些API接口：您可以看到它们涵盖了所有的创建，读取，更新和删除（CRUD）等操作。你可以去post一条数据来试试看。</p><h2 id="四、将API连接到数据源"><a href="#四、将API连接到数据源" class="headerlink" title="四、将API连接到数据源"></a>四、将API连接到数据源</h2><h3 id="添加一个数据源"><a href="#添加一个数据源" class="headerlink" title="添加一个数据源"></a>添加一个数据源</h3><p>现在，您将使用数据源生成器定义数据源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lb datasource</span><br></pre></td></tr></table></figure><p>生成器将提示您命名数据源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Enter the data-source name:</span><br></pre></td></tr></table></figure><p>接下来，生成器将提示您输入数据源的类型，这里以mySql为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? Select the connector for mysqlDs: (Use arrow keys)</span><br><span class="line">❯ In-memory db (supported by StrongLoop)</span><br><span class="line">  IBM DB2 (supported by StrongLoop)</span><br><span class="line">  IBM DashDB (supported by StrongLoop)</span><br><span class="line">  IBM MQ Light (supported by StrongLoop)</span><br><span class="line">  IBM Cloudant DB (supported by StrongLoop)</span><br><span class="line">  IBM DB2 for z/OS (supported by StrongLoop)</span><br><span class="line">  MongoDB (supported by StrongLoop)</span><br><span class="line">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure><p>然后该工具将提示您输入数据源配置，对于MySQL，您可以以URL格式或单独输入所有设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connector-specific configuration:</span><br><span class="line">? Connection String url to override other settings (eg: mysql://user:pass@host/db):</span><br></pre></td></tr></table></figure><p>按回车键跳过。</p><blockquote><p>提示：尽量使用自己的MySQL数据库服务器，并创建一个名为“getting_started”的新数据库，数据库名称可以自己定义，但是请确保datasources.json中的mysqlDs.database属性与之匹配。</p></blockquote><blockquote><p>如果没有，您可以使用在demo.strongloop.com上运行的StrongLoop MySQL服务器。但它是一个共享资源，两个用户可能会同时运行创建样本数据的脚本，这可能会引发冲突。因此，我们建议您使用自己的MySQL服务器。</p></blockquote><p>如果使用StrongLoop MySQL服务器，请输入如下所示的设置。如果使用您自己的MySQL服务器，请输入服务器的主机名，端口号和登录信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? host: demo.strongloop.com</span><br><span class="line">? port: 3306</span><br><span class="line">? user: demo</span><br><span class="line">? password: L00pBack</span><br><span class="line">? database: getting_started</span><br><span class="line">? Install loopback-connector-mysql@^2.2 Yes</span><br></pre></td></tr></table></figure><p>当工具提示您安装连接器时，运行<code>npm install loopback-connector-mysql --save</code>。该工具还将数据源定义添加到<code>server/datasources.json</code>文件中，如下所示。请注意刚刚添加的“mysqlDs”数据源，以及名为“db”的内存数据源，默认情况下是这样。</p><p><strong>/server/datasources.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"db"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"db"</span>,</span><br><span class="line">    <span class="attr">"connector"</span>: <span class="string">"memory"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mysqlDs"</span>: &#123;</span><br><span class="line">      <span class="attr">"host"</span>: <span class="string">"demo.strongloop.com"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">3306</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"database"</span>: <span class="string">"getting_started"</span>,</span><br><span class="line">      <span class="attr">"password"</span>: <span class="string">"L00pBack"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"mysqlDs"</span>,</span><br><span class="line">      <span class="attr">"user"</span>: <span class="string">"demo"</span>,</span><br><span class="line">      <span class="attr">"connector"</span>: <span class="string">"mysql"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将CoffeeShop模型连接到MySQL"><a href="#将CoffeeShop模型连接到MySQL" class="headerlink" title="将CoffeeShop模型连接到MySQL"></a>将CoffeeShop模型连接到MySQL</h3><p>现在你创建了一个MySQL数据源，并且有一个CoffeeShop模型，接下来需要把它们联系起来。LoopBack应用程序使用model-config.json文件将模型链接到数据源。编辑<code>/server/model-config.json</code>并查找CoffeeShop条目： </p><p><strong>/server/model-config.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &quot;CoffeeShop&quot;: &#123;</span><br><span class="line">    &quot;dataSource&quot;: &quot;db&quot;,</span><br><span class="line">    &quot;public&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>把dataSource属性从db更改为mysqlDs。使CoffeeShop模型附加到刚刚创建和配置的MySQL数据源：</p><p><strong>/server/model-config.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &quot;CoffeeShop&quot;: &#123;</span><br><span class="line">    &quot;dataSource&quot;: &quot;mysqlDs&quot;,</span><br><span class="line">    &quot;public&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="添加一些测试数据"><a href="#添加一些测试数据" class="headerlink" title="添加一些测试数据"></a>添加一些测试数据</h3><p>现在LoopBack中已经有了一个CoffeeShop模型，如何在MySQL数据库中创建相应的表？</p><p>您可以直接尝试执行一些SQL语句，不过LoopBack提供了一个Node API，可以自动执行一个称作auto-migration的程序。</p><p><code>loopback-getting-started</code>模块包含用于演示自动迁移的create-sample-models.js脚本。</p><blockquote><p>注意：以下自动迁移脚本是在应用程序初始启动时LoopBack执行的引导脚本的示例。使用引导脚本进行初始化，并执行应用程序启动时执行的任何其他逻辑。</p></blockquote><p><strong>/server/boot/create-sample-models.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.dataSources.mysqlDs.automigrate(<span class="string">'CoffeeShop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    app.models.CoffeeShop.create([&#123;</span><br><span class="line">      name: <span class="string">'Bel Cafe'</span>,</span><br><span class="line">      city: <span class="string">'Vancouver'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: <span class="string">'Three Bees Coffee House'</span>,</span><br><span class="line">      city: <span class="string">'San Mateo'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: <span class="string">'Caffe Artigiano'</span>,</span><br><span class="line">      city: <span class="string">'Vancouver'</span></span><br><span class="line">    &#125;, ], <span class="function"><span class="keyword">function</span>(<span class="params">err, coffeeShops</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Models created: \n'</span>, coffeeShops);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这将保存一些测试数据到数据源。</p><h2 id="五、扩展API"><a href="#五、扩展API" class="headerlink" title="五、扩展API"></a>五、扩展API</h2><h3 id="添加远程方法"><a href="#添加远程方法" class="headerlink" title="添加远程方法"></a>添加远程方法</h3><p>按着如下步骤：</p><ol><li>查看您的应用程序的<code>/common/models</code>目录。你会注意到文件夹里有coffee-shop.js和coffee-shop.json这两个文件。</li><li><p>在编辑器中打开coffee-shop.js，默认情况下，它包含一个空的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(CoffeeShop) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>将以下代码添加到此函数中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">CoffeeShop</span>) </span>&#123;</span><br><span class="line">  CoffeeShop.status = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> currentHour = currentDate.getHours();</span><br><span class="line">    <span class="keyword">var</span> OPEN_HOUR = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">var</span> CLOSE_HOUR = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Current hour is %d'</span>, currentHour);</span><br><span class="line">    <span class="keyword">var</span> response;</span><br><span class="line">    <span class="keyword">if</span> (currentHour &gt; OPEN_HOUR &amp;&amp; currentHour &lt; CLOSE_HOUR) &#123;</span><br><span class="line">      response = <span class="string">'We are open for business.'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response = <span class="string">'Sorry, we are closed. Open daily from 6am to 8pm.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cb(<span class="literal">null</span>, response);</span><br><span class="line">  &#125;;</span><br><span class="line">  CoffeeShop.remoteMethod(</span><br><span class="line">    <span class="string">'status'</span>, &#123;</span><br><span class="line">      http: &#123;</span><br><span class="line">        path: <span class="string">'/status'</span>,</span><br><span class="line">        verb: <span class="string">'get'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      returns: &#123;</span><br><span class="line">        arg: <span class="string">'status'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>这定义了一个称为“状态”的简单远程方法，它不需要任何参数，并且根据当前时间检查时间并返回一个表示“打开营业”或“对不起我们关闭”的JSON状态消息。<br>当然，在实践中，您可以使用远程方法来做更多有趣和复杂的事情，例如在将数据保留到数据库之前操纵输入数据。您还可以更改调用远程方法的路由，并定义复杂参数并返回值。</p><h3 id="使用远程方法"><a href="#使用远程方法" class="headerlink" title="使用远程方法"></a>使用远程方法</h3><ol><li>回到应用程序根目录，运行应用程序：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br></pre></td></tr></table></figure><ol start="2"><li>转到http：// localhost：3000 / explorer查看API资源管理器。然后点击CoffeeShops，你会看到有一个新的REST端点，GET / CoffeeShop / status调用远程方法。</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/3396508-6f0ca00dc2e36023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>点击<strong>try it out</strong>！您会看到调用远程方法的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;Open for business.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过LoopBack，很轻易地添加了一个远程方法。</p><h3 id="在远程方法中执行创建，检索，更新和删除方法"><a href="#在远程方法中执行创建，检索，更新和删除方法" class="headerlink" title="在远程方法中执行创建，检索，更新和删除方法"></a>在远程方法中执行创建，检索，更新和删除方法</h3><p>状态远程方法是微不足道的，但远程方法还可以访问任何标准模型创建，检索，更新和删除方法来执行数据处理和验证。这是一个简单的例子（这不是在loopback-getting-started库中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(CoffeeShop) &#123;</span><br><span class="line">...</span><br><span class="line">  CoffeeShop.getName = function(shopId, cb) &#123;</span><br><span class="line">    CoffeeShop.findById( shopId, function (err, instance) &#123;</span><br><span class="line">        var response = &quot;Name of coffee shop is &quot; + instance.name;</span><br><span class="line">        cb(null, response);</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">  CoffeeShop.remoteMethod (</span><br><span class="line">        &apos;getName&apos;,</span><br><span class="line">        &#123;</span><br><span class="line">          http: &#123;path: &apos;/getname&apos;, verb: &apos;get&apos;&#125;,</span><br><span class="line">          accepts: &#123;arg: &apos;id&apos;, type: &apos;number&apos;, http: &#123; source: &apos;query&apos; &#125; &#125;,</span><br><span class="line">          returns: &#123;arg: &apos;name&apos;, type: &apos;string&apos;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后如果您访问远程方法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:3000/api/CoffeeShops/getname?id=1</span><br></pre></td></tr></table></figure><p>将会得到响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Name of coffee shop is Bel Cafe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、添加一个静态页面"><a href="#六、添加一个静态页面" class="headerlink" title="六、添加一个静态页面"></a>六、添加一个静态页面</h2><h3 id="中间件简介"><a href="#中间件简介" class="headerlink" title="中间件简介"></a>中间件简介</h3><p>在继续之前，您首先需要了解Express中间件的基础知识。中间件只是一个JavaScript函数，可以访问表示HTTP请求的请求对象（req），表示HTTP响应的响应对象（res），以及Express应用程序的请求 - 响应周期中，由一个名为next的变量表示的下一个中间件。</p><p>中间件可以做什么？</p><ul><li>执行任何代码。</li><li>更改请求和响应对象。</li><li>结束请求 - 响应周期。</li><li>调用堆栈中的下一个中间件。</li></ul><p>LoopBack中间件就像Express中间件，除了LoopBack添加了相位的概念，使您能够轻松设置调用中间件的顺序。这避免了Express的一个棘手问题：确保中间件在需要的时候能够执行。</p><p>当您使用应用程序生成器创建应用程序时，它将创建一个<code>server/middleware.json</code>文件，指定中间件在哪个阶段执行。注册新的中间件与编辑此JSON文件一样简单：</p><p><strong>server/middleware.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;initial:before&quot;: &#123;</span><br><span class="line">    &quot;loopback#favicon&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;initial&quot;: &#123;</span><br><span class="line">    &quot;compression&quot;: &#123;&#125;,</span><br><span class="line">    &quot;cors&quot;: &#123;</span><br><span class="line">      &quot;params&quot;: &#123;</span><br><span class="line">        &quot;origin&quot;: true,</span><br><span class="line">        &quot;credentials&quot;: true,</span><br><span class="line">        &quot;maxAge&quot;: 86400</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;helmet#xssFilter&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#frameguard&quot;: &#123;</span><br><span class="line">      &quot;params&quot;: [</span><br><span class="line">        &quot;deny&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;helmet#hsts&quot;: &#123;</span><br><span class="line">      &quot;params&quot;: &#123;</span><br><span class="line">        &quot;maxAge&quot;: 0,</span><br><span class="line">        &quot;includeSubdomains&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;helmet#hidePoweredBy&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#ieNoOpen&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#noSniff&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#noCache&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;session&quot;: &#123;&#125;,</span><br><span class="line">  &quot;auth&quot;: &#123;&#125;,</span><br><span class="line">  &quot;parse&quot;: &#123;&#125;,</span><br><span class="line">  &quot;routes&quot;: &#123;</span><br><span class="line">    &quot;loopback#rest&quot;: &#123;</span><br><span class="line">      &quot;paths&quot;: [</span><br><span class="line">        &quot;$&#123;restApiRoot&#125;&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;final&quot;: &#123;</span><br><span class="line">    &quot;loopback#urlNotFound&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;final:after&quot;: &#123;</span><br><span class="line">    &quot;strong-error-handler&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>middleware.json</code>中的每个顶层键都定义了一个中间件阶段：<code>initial</code>，<code>session</code>，<code>auth</code>等等，到<code>final</code>为止。在给定阶段之前和之后，还有修改器注册中间件。在给定阶段的前后也有注册中间件的修改器。</p><h3 id="更换或修改默认的根路由处理程序"><a href="#更换或修改默认的根路由处理程序" class="headerlink" title="更换或修改默认的根路由处理程序"></a>更换或修改默认的根路由处理程序</h3><p>应用程序通常需要提供静态内容，如HTML和CSS文件，客户端JavaScript文件，图像等。<br>使用LoopBack应用程序默认的脚手架很容易做到。您将去配置应用程序去启动/client文件夹中的静态资源。</p><p>首先，您必须禁用根URL的默认路由处理程序。当你加载应用程序的根URL <a href="http:// localhost:3000/" target="_blank" rel="noopener">http:// localhost:3000/</a>时，你看到应用程序用一个简单的状态消息，如这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;started&quot;:&quot;2014-11-20T21:59:47.155Z&quot;,&quot;uptime&quot;:42.054&#125;</span><br></pre></td></tr></table></figure><p>这是因为默认情况下，脚手架应用程序具有一个名为root.js的启动脚本，该脚本为根路径（“/”）设置路由处理中间件：</p><p><strong>server/boot/root.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(server) &#123; // Install a `/` route that returns server status</span><br><span class="line">  var router = server.loopback.Router();</span><br><span class="line">  router.get(&apos;/&apos;, server.loopback.status());</span><br><span class="line">  server.use(router);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该代码说，对于根URI（“/”）的任何GET请求，应用程序将返回loopback.status（）的结果。要加入您自己的静态页面，您需要禁用此脚本。要么删除它，要么将其重命名为没有.js结尾的东西（确保应用程序不会执行它）。</p><h3 id="定义静态中间件"><a href="#定义静态中间件" class="headerlink" title="定义静态中间件"></a>定义静态中间件</h3><p>接下来，您需要定义静态中间件来为/ client目录中的文件提供服务。</p><p><strong>server/middleware.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;files&quot;: &#123;&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><p><strong>server/middleware.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;files&quot;: &#123;</span><br><span class="line">  &quot;loopback#static&quot;: &#123;</span><br><span class="line">    &quot;params&quot;: &quot;$!../client&quot; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="添加一个HTML文件"><a href="#添加一个HTML文件" class="headerlink" title="添加一个HTML文件"></a>添加一个HTML文件</h3><p>这些行定义静态中间件，使应用程序将/ client目录中的文件作为静态内容。<code>$！</code>字符表示路径是相对于middleware.json文件的位置。</p><p><strong>/client/index.html</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&lt;title&gt;LoopBack&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;LoopBack Rocks!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Hello World... &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>现在再次运行应用程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .</span><br></pre></td></tr></table></figure><p>打开<a href="http://0.0.0.0:3000/" target="_blank" rel="noopener">http://0.0.0.0:3000/</a>：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-b394064999a52916.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="七、添加自定义的Express路由"><a href="#七、添加自定义的Express路由" class="headerlink" title="七、添加自定义的Express路由"></a>七、添加自定义的Express路由</h2><h3 id="引入引导脚本"><a href="#引入引导脚本" class="headerlink" title="引入引导脚本"></a>引入引导脚本</h3><p>当LoopBack应用程序启动（也称为引导（bootstraps））时，它将运行<code>/server/boot</code>目录中的脚本，称为引导脚本。默认情况下，LoopBack按字母顺序加载引导脚本。</p><p>应用程序生成器创建的标准LoopBack应用脚手架中包含执行基本初始化的以下标准引导脚本（在/ server / boot中）：</p><ul><li><code>authentication.js</code> -  通过调用app.enableAuth()来启用应用程序的身份验证。</li><li><code>root.js</code> - 使用loopback.status()中间件定义<code>/</code>返回服务器状态的根路由。</li></ul><h3 id="添加一个新的启动脚本"><a href="#添加一个新的启动脚本" class="headerlink" title="添加一个新的启动脚本"></a>添加一个新的启动脚本</h3><p>例如，在<code>/server/boot</code>目录中添加一个名为routes.js的新引导脚本，其代码如下：</p><p><strong>/server/boot/routes.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  // Install a &quot;/ping&quot; route that returns &quot;pong&quot;</span><br><span class="line">  app.get(&apos;/ping&apos;, function(req, res) &#123;</span><br><span class="line">    res.send(&apos;pong&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，也可以使用Express路由器中间件，如下所示：</p><p><strong>/server/boot/routes.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  var router = app.loopback.Router();</span><br><span class="line">  router.get(&apos;/ping&apos;, function(req, res) &#123;</span><br><span class="line">    res.send(&apos;pongaroo&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.use(router);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，您也可以使用Express API在server.js中添加路由。例如，在调用app.start()之前将此调用添加到app.use()：</p><p><strong>server/server.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.use(&apos;/express-status&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(&#123; running: true &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// start the server if `$ node server.js`</span><br><span class="line">if (require.main === module) &#123;</span><br><span class="line">  app.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoopBack应用程序可以轻松地执行Express应用程序可以执行的所有操作。如果您熟悉Express，LoopBack将会更容易学习。</p><h3 id="运行引导脚本"><a href="#运行引导脚本" class="headerlink" title="运行引导脚本"></a>运行引导脚本</h3><p>现在，再次运行应用程序：</p><p>加载<a href="http://0.0.0.0:3000/ping" target="_blank" rel="noopener">http://0.0.0.0:3000/ping</a>。您会得到一个’pong’的响应。</p><p>现在一个简单的loopback应用程序就已经搭建完成了。</p><h2 id="八、下一步"><a href="#八、下一步" class="headerlink" title="八、下一步"></a>八、下一步</h2><p>接下来的教程将涵盖：</p><ul><li>在单个应用程序中使用多个数据源。</li><li>模型之间的关系。</li><li>远程钩子。</li><li>使用权限控制来保护REST接口。</li><li>用户注册和认证</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装LoopBack工具来创建和开发LoopBack 3.0应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node.js&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装loopback工具&quot;&gt;&lt;a href=&quot;#安装loopback工具&quot; class=&quot;headerlink&quot; title=&quot;安装loopback工具&quot;&gt;&lt;/a&gt;安装loopback工具&lt;/h3&gt;&lt;p&gt;虽然你可以自己从头开始编写一个LoopBack应用程序，但是安装一个LoopBack CLI工具能够使它更容易入门。它将构建应用程序的基本结构，然后您可以根据需要进行自定义。&lt;/p&gt;
&lt;p&gt;LoopBack提供了两个工具的选项：&lt;a href=&quot;http://loopback.io/doc/en/lb3/Installation.html#install-loopback-cli-tool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LoopBack CLI&lt;/a&gt; 和 &lt;a href=&quot;http://loopback.io/doc/en/lb3/Installation.html#install-ibm-api-connect-developer-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IBM API Connect开发工具包&lt;/a&gt;，这里可以选择LoopBack CLI来进行应用程序的构建。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://zyqvizzz.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Node.JS" scheme="http://zyqvizzz.github.io/tags/Node-JS/"/>
    
      <category term="LoopBack" scheme="http://zyqvizzz.github.io/tags/LoopBack/"/>
    
  </entry>
  
</feed>
