<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BAIXS&#39;s BOOK</title>
  
  <subtitle>百晓生的兵器谱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T05:02:49.429Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>断桥百晓生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/hello-world/"/>
    <id>http://yoursite.com/hello-world/</id>
    <published>2018-08-16T04:12:57.000Z</published>
    <updated>2018-08-14T05:02:49.429Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS中函数与对象之间的关系</title>
    <link href="http://yoursite.com/JS%E4%B8%AD%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/JS中函数与对象之间的关系/</id>
    <published>2018-08-08T06:18:09.000Z</published>
    <updated>2018-08-14T06:20:06.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>函数的作用是帮我们编写更少的代码，并阻止我们重复工作。</p></blockquote><p>函数是JavaScript中的主要概念之一，同时函数也是任何编程语言的基本特性。但和一些基于类的语言如Java或PHP不同的是，ES6之前的JavaScript并不遵循基于类的结构，而是遵循基于原型的继承，这很容易会让人感到混乱。</p><p>在JavaScript中，函数有一个额外的工作要执行：创建对象。正如我们所知道的那样，JavaScript基于原型的继承，但我们依然需要创建一个对象，这样我们才能够将相关的逻辑组合到一起。</p><a id="more"></a><p>那么我们如何从函数中创建对象呢？使用关键字new。为此，我们需要创建一个被称作构造函数的东西。</p><p>函数在本质上是一个对象，它具有两个特殊的属性：名称和代码。如果它被命名，那么名称将存储在name属性中，而我们要执行的代码将存储在代码中。当我们调用函数时，JavaScript将会在代码属性里执行代码段。</p><p>写一个简单的函数看看控制台里打印出了什么。</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-7b5b7f0191fc0cff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p><p>在控制台里，Window对象中的example有一个name属性，属性名称为”example”。当我们用new关键字调用这个函数之前，这个函数只保持为普通函数。当使用new关键字调用时，我们调用的是prototype.constructor方法，该方法可以从函数中实例化一个新的对象。</p><p>由于函数也是对象的一种，所以我们也可以在example函数中附加一些属性和方法。方法存储在函数的prototype属性中，而不是以单个对象的方式存在的，这些方法对于此函数创建的所有实例对象都是通用的。这是为了将所有方法保存在同一个位置，有助于减少对象的内存占用。</p><p>示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let ep = function example(name, age)&#123;</span><br><span class="line"></span><br><span class="line">    this.name = name;</span><br><span class="line"></span><br><span class="line">    this.age = age;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ep.prototype.sayHi = function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(`my name is $&#123;this.name&#125;, my age is $&#123;this.age&#125;`);</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  let ep1 = new ep(1,2);</span><br><span class="line"></span><br><span class="line">  console.log(ep1);</span><br></pre></td></tr></table></figure><p>查看控制台中输出：</p><p><img src="https://upload-images.jianshu.io/upload_images/3396508-c6824f87901def27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;函数的作用是帮我们编写更少的代码，并阻止我们重复工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数是JavaScript中的主要概念之一，同时函数也是任何编程语言的基本特性。但和一些基于类的语言如Java或PHP不同的是，ES6之前的JavaScript并不遵循基于类的结构，而是遵循基于原型的继承，这很容易会让人感到混乱。&lt;/p&gt;
&lt;p&gt;在JavaScript中，函数有一个额外的工作要执行：创建对象。正如我们所知道的那样，JavaScript基于原型的继承，但我们依然需要创建一个对象，这样我们才能够将相关的逻辑组合到一起。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js学习：使用Loopback3.0构建应用程序（一）</title>
    <link href="http://yoursite.com/Node.js%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%BD%BF%E7%94%A8Loopback3.0%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/Node.js学习：使用Loopback3.0构建应用程序（一）/</id>
    <published>2017-06-20T14:12:57.000Z</published>
    <updated>2018-08-14T06:42:12.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><blockquote><p>安装LoopBack工具来创建和开发LoopBack 3.0应用程序。</p></blockquote><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node下载地址</a></p><h3 id="安装loopback工具"><a href="#安装loopback工具" class="headerlink" title="安装loopback工具"></a>安装loopback工具</h3><p>虽然你可以自己从头开始编写一个LoopBack应用程序，但是安装一个LoopBack CLI工具能够使它更容易入门。它将构建应用程序的基本结构，然后您可以根据需要进行自定义。</p><p>LoopBack提供了两个工具的选项：<a href="http://loopback.io/doc/en/lb3/Installation.html#install-loopback-cli-tool" target="_blank" rel="noopener">LoopBack CLI</a> 和 <a href="http://loopback.io/doc/en/lb3/Installation.html#install-ibm-api-connect-developer-toolkit" target="_blank" rel="noopener">IBM API Connect开发工具包</a>，这里可以选择LoopBack CLI来进行应用程序的构建。</p><a id="more"></a><h4 id="安装Loopback-CLI工具"><a href="#安装Loopback-CLI工具" class="headerlink" title="安装Loopback CLI工具"></a>安装Loopback CLI工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g loopback-cli</span><br></pre></td></tr></table></figure><p>这一步将安装 <code>lb</code> 命令行工具，用于构建和修改LoopBack应用程序。</p><h3 id="安装更新"><a href="#安装更新" class="headerlink" title="安装更新"></a>安装更新</h3><p>如果之前安装过strongloop，需要进行一次版本的更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure><p>如果遇到任何问题，可以尝试卸载重装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g strongloop</span><br><span class="line">npm cache clear</span><br><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure><h2 id="二、使用Loopback创建一个应用"><a href="#二、使用Loopback创建一个应用" class="headerlink" title="二、使用Loopback创建一个应用"></a>二、使用Loopback创建一个应用</h2><h3 id="创建一个简单的API"><a href="#创建一个简单的API" class="headerlink" title="创建一个简单的API"></a>创建一个简单的API</h3><p>首先使用loopback-cli创建一个新的应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb</span><br></pre></td></tr></table></figure><p>LoopBack应用生成器将提示您输入应用程序的名称。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">     _-----_</span><br><span class="line">    |       |    .--------------------------.</span><br><span class="line">    |--(o)--|    |  Let&apos;s create a LoopBack |</span><br><span class="line">   `---------´   |       application!       |</span><br><span class="line">    ( _´U`_ )    &apos;--------------------------&apos;</span><br><span class="line">    /___A___\</span><br><span class="line">     |  ~  |</span><br><span class="line">   __&apos;.___.&apos;__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line">[?] What&apos;s the name of your application? loopback-getting-started</span><br><span class="line">[?] Enter name of the directory to contain the project: loopback-getting-started</span><br></pre></td></tr></table></figure><blockquote><p>这里可以替换成任何你喜欢的名字，本教程使用了官方文档中的名称：loopback-getting-started。</p></blockquote><p>接下来cli工具会询问要创建什么样的应用程序：可以选择 <code>hello-world</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? What kind of application do you have in mind? (Use arrow keys)</span><br><span class="line">  api-server (A LoopBack API server with local User auth)</span><br><span class="line">  empty-server (An empty LoopBack API, without any configured models or datasources)</span><br><span class="line">❯ hello-world (A project containing a controller, including a single vanilla Message and</span><br><span class="line">    a single remote method)</span><br><span class="line">  notes (A project containing a basic working example, including a memory database)</span><br></pre></td></tr></table></figure><p>然后，生成器将在其构建应用程序时创建如下信息，包括：</p><ol><li>初始化项目的文件夹结构。</li><li>创建默认的JSON文件。</li><li>创建默认的JavaScript文件。</li><li>下载并安装依赖节点模块（省去手动安装npm的一步）。</li></ol><h3 id="创建一个数据模型"><a href="#创建一个数据模型" class="headerlink" title="创建一个数据模型"></a>创建一个数据模型</h3><p>完成了初始项目的构建，接下来我们将创建一个自动具有REST API接口的CoffeeShop模型。</p><p>进入应用程序目录，然后运行LoopBack模型生成器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lb model</span><br></pre></td></tr></table></figure><p>生成器将提示输入数据模型的名称，输入CoffeeShop：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Enter the model name: CoffeeShop</span><br></pre></td></tr></table></figure><p>它会询问您是否要将模型附加到已经一些已经定义的数据源。 此时，只有默认的内存数据源可用。按Enter键选择它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[?] Select the data-source to attach CoffeeShop to: (Use arrow keys)</span><br><span class="line">❯ db (memory)</span><br></pre></td></tr></table></figure><p>然后，生成器将提示您使用基类作为模型。由于您在最终会把该模型连接到数据库中的持久数据源，所以这里选择PersistedModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[?] Select model&apos;s base class: (Use arrow keys)</span><br><span class="line">  Model</span><br><span class="line">❯ PersistedModel</span><br><span class="line">  ACL</span><br><span class="line">  AccessToken</span><br><span class="line">  Application</span><br><span class="line">  Change</span><br><span class="line">  Checkpoint</span><br></pre></td></tr></table></figure><p>PersistedModel是连接到持久性数据源（如数据库）的所有模型的基础对象，也就是基类。</p><blockquote><p>关于Loopback中的模型：</p><p>模型是LoopBack的核心，表示如数据库或其他后端服务（REST，SOAP等）等后端数据源。 LoopBack模型是具有Node和REST API的JavaScript对象。</p><p>LoopBack的一个关键功能是当您定义一个模型时，它将自动附带预定义的REST API，并具有完整的创建，读取，更新和删除操作。</p><p>Basic模型对象具有添加钩子和验证数据的方法。其他模型对象都“继承”它。模型具有继承层次结构，如下图所示：将模型附加到持久性数据源时，它将成为具有创建，检索，更新和删除操作的连接模型。 LoopBack的内置模型继承自它。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-f7230f84f992a43d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="model的继承关系"></p></blockquote><p>LoopBack的强大优点之一是它自动为您的模型生成REST API。生成器将询问您是否要公开此REST API。 </p><p>再次输入Enter接受默认值，并通过REST暴露CoffeeShop模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Expose CoffeeShop via the REST API? (Y/n) Y</span><br></pre></td></tr></table></figure><p>LoopBack使用模型名称的复数自动创建与模型关联的REST路由。默认情况下，它将您的名称复数（通过添加“s”），但是如果需要，您可以指定自定义复数形式。</p><p>按Enter接受默认复数形式（CoffeeShops）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Custom plural form (used to build REST URL):</span><br></pre></td></tr></table></figure><p>接下来，系统会询问您是要仅在服务器上创建模型，还是在<code>/common</code>目录中创建模型，这些模型可能由服务器端口和客户端LoopBack API使用。选择common，即使在这个应用程序中，你只使用服务器端模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Common model or server only?</span><br><span class="line">❯ common</span><br><span class="line">  server</span><br></pre></td></tr></table></figure><p>每个模型都有属性。现在，您将为CoffeeShop模型定义一个属性“name”。</p><p>选择字符串作为属性类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Let&apos;s add some CoffeeShop properties now.</span><br><span class="line">Enter an empty property name when done.</span><br><span class="line">[?] Property name: name</span><br><span class="line">   invoke   loopback:property</span><br><span class="line">[?] Property type: (Use arrow keys)</span><br><span class="line">❯ string</span><br><span class="line">  number</span><br><span class="line">  boolean</span><br><span class="line">  object</span><br><span class="line">  array</span><br><span class="line">  date</span><br><span class="line">  buffer</span><br><span class="line">  geopoint</span><br><span class="line">  (other)</span><br></pre></td></tr></table></figure><p>每个属性可以是可选的或必需的。输入 <code>y</code> 以将 <code>name</code> 设为必需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Required? (y/N)</span><br></pre></td></tr></table></figure><p>然后系统会提示您输入属性的默认值;按Enter键不设默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Default value[leave blank for none]:</span><br></pre></td></tr></table></figure><p>然后，系统会提示您添加其他属性。按照提示添加名为“city”的必需属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Let&apos;s add another CoffeeShop property.</span><br><span class="line">? Property name: city</span><br><span class="line">? Property type: string</span><br><span class="line">? Required? Yes</span><br><span class="line">? Default value[leave blank for none]:</span><br></pre></td></tr></table></figure><p>当提示输入下一个属性的名称时，按Enter键结束模型创建过程。</p><p>模型生成器将在应用程序的 <code>common / models</code> 目录中创建两个定义模型的文件： <code>coffee-shop.json</code> 和 <code>coffee-shop.js</code>。</p><blockquote><p>LoopBack模型生成器自动将驼峰式的模型名称（例如MyModel）转换为小写字母名称（my-model）。例如，如果您使用模型生成器创建一个名为“FooBar”的模型，它将在 <code>common/models</code> 中创建<code>foo-bar.json</code>和<code>foo-bar.js</code>文件。但是，模型名称（“FooBar”）将通过模型的名称属性进行保留。</p></blockquote><h3 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">...</span><br><span class="line">Browse your REST API at http://0.0.0.0:3000/explorer</span><br><span class="line">Web server listening at: http://0.0.0.0:3000/</span><br></pre></td></tr></table></figure><p>现在打开你的浏览器到<a href="http://0.0.0.0:3000/explorer" target="_blank" rel="noopener">http://0.0.0.0:3000/explorer</a> 或<a href="http://localhost:3000/explorer" target="_blank" rel="noopener">http://localhost:3000/explorer</a> 。您将看到StrongLoop API资源管理器：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-70980b142c629bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>通过使用LoopBack的一系列简单的步骤，您创建了一个CoffeeShop模型并为它设置了一些属性，然后通过REST进行公开。</p><h2 id="三、使用API​​资源管理器"><a href="#三、使用API​​资源管理器" class="headerlink" title="三、使用API​​资源管理器"></a>三、使用API​​资源管理器</h2><h3 id="运行API​​资源管理器"><a href="#运行API​​资源管理器" class="headerlink" title="运行API​​资源管理器"></a>运行API​​资源管理器</h3><p>运行应用: <code>node .</code></p><p>转到 <a href="http://localhost:3000/explorer" target="_blank" rel="noopener">http://localhost:3000/explorer</a>。您将看到StrongLoop API资源管理器中显示了该应用程序的两个模型：User和CoffeeShop：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-70980b142c629bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="探索CoffeeShop模型"><a href="#探索CoffeeShop模型" class="headerlink" title="探索CoffeeShop模型"></a>探索CoffeeShop模型</h3><p>除了CoffeeShop模型之外，Loopback还会为每个应用程序生成默认的用户模型及其接口。</p><p>展开CoffeeShops之后，可以看到它所有的API接口。</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-68483e8526641f7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大致浏览这些API接口：您可以看到它们涵盖了所有的创建，读取，更新和删除（CRUD）等操作。你可以去post一条数据来试试看。</p><h2 id="四、将API连接到数据源"><a href="#四、将API连接到数据源" class="headerlink" title="四、将API连接到数据源"></a>四、将API连接到数据源</h2><h3 id="添加一个数据源"><a href="#添加一个数据源" class="headerlink" title="添加一个数据源"></a>添加一个数据源</h3><p>现在，您将使用数据源生成器定义数据源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lb datasource</span><br></pre></td></tr></table></figure><p>生成器将提示您命名数据源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] Enter the data-source name:</span><br></pre></td></tr></table></figure><p>接下来，生成器将提示您输入数据源的类型，这里以mySql为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? Select the connector for mysqlDs: (Use arrow keys)</span><br><span class="line">❯ In-memory db (supported by StrongLoop)</span><br><span class="line">  IBM DB2 (supported by StrongLoop)</span><br><span class="line">  IBM DashDB (supported by StrongLoop)</span><br><span class="line">  IBM MQ Light (supported by StrongLoop)</span><br><span class="line">  IBM Cloudant DB (supported by StrongLoop)</span><br><span class="line">  IBM DB2 for z/OS (supported by StrongLoop)</span><br><span class="line">  MongoDB (supported by StrongLoop)</span><br><span class="line">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure><p>然后该工具将提示您输入数据源配置，对于MySQL，您可以以URL格式或单独输入所有设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connector-specific configuration:</span><br><span class="line">? Connection String url to override other settings (eg: mysql://user:pass@host/db):</span><br></pre></td></tr></table></figure><p>按回车键跳过。</p><blockquote><p>提示：尽量使用自己的MySQL数据库服务器，并创建一个名为“getting_started”的新数据库，数据库名称可以自己定义，但是请确保datasources.json中的mysqlDs.database属性与之匹配。</p></blockquote><blockquote><p>如果没有，您可以使用在demo.strongloop.com上运行的StrongLoop MySQL服务器。但它是一个共享资源，两个用户可能会同时运行创建样本数据的脚本，这可能会引发冲突。因此，我们建议您使用自己的MySQL服务器。</p></blockquote><p>如果使用StrongLoop MySQL服务器，请输入如下所示的设置。如果使用您自己的MySQL服务器，请输入服务器的主机名，端口号和登录信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? host: demo.strongloop.com</span><br><span class="line">? port: 3306</span><br><span class="line">? user: demo</span><br><span class="line">? password: L00pBack</span><br><span class="line">? database: getting_started</span><br><span class="line">? Install loopback-connector-mysql@^2.2 Yes</span><br></pre></td></tr></table></figure><p>当工具提示您安装连接器时，运行<code>npm install loopback-connector-mysql --save</code>。该工具还将数据源定义添加到<code>server/datasources.json</code>文件中，如下所示。请注意刚刚添加的“mysqlDs”数据源，以及名为“db”的内存数据源，默认情况下是这样。</p><p><strong>/server/datasources.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"db"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"db"</span>,</span><br><span class="line">    <span class="attr">"connector"</span>: <span class="string">"memory"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mysqlDs"</span>: &#123;</span><br><span class="line">      <span class="attr">"host"</span>: <span class="string">"demo.strongloop.com"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">3306</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"database"</span>: <span class="string">"getting_started"</span>,</span><br><span class="line">      <span class="attr">"password"</span>: <span class="string">"L00pBack"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"mysqlDs"</span>,</span><br><span class="line">      <span class="attr">"user"</span>: <span class="string">"demo"</span>,</span><br><span class="line">      <span class="attr">"connector"</span>: <span class="string">"mysql"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将CoffeeShop模型连接到MySQL"><a href="#将CoffeeShop模型连接到MySQL" class="headerlink" title="将CoffeeShop模型连接到MySQL"></a>将CoffeeShop模型连接到MySQL</h3><p>现在你创建了一个MySQL数据源，并且有一个CoffeeShop模型，接下来需要把它们联系起来。LoopBack应用程序使用model-config.json文件将模型链接到数据源。编辑<code>/server/model-config.json</code>并查找CoffeeShop条目： </p><p><strong>/server/model-config.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &quot;CoffeeShop&quot;: &#123;</span><br><span class="line">    &quot;dataSource&quot;: &quot;db&quot;,</span><br><span class="line">    &quot;public&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>把dataSource属性从db更改为mysqlDs。使CoffeeShop模型附加到刚刚创建和配置的MySQL数据源：</p><p><strong>/server/model-config.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &quot;CoffeeShop&quot;: &#123;</span><br><span class="line">    &quot;dataSource&quot;: &quot;mysqlDs&quot;,</span><br><span class="line">    &quot;public&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="添加一些测试数据"><a href="#添加一些测试数据" class="headerlink" title="添加一些测试数据"></a>添加一些测试数据</h3><p>现在LoopBack中已经有了一个CoffeeShop模型，如何在MySQL数据库中创建相应的表？</p><p>您可以直接尝试执行一些SQL语句，不过LoopBack提供了一个Node API，可以自动执行一个称作auto-migration的程序。</p><p><code>loopback-getting-started</code>模块包含用于演示自动迁移的create-sample-models.js脚本。</p><blockquote><p>注意：以下自动迁移脚本是在应用程序初始启动时LoopBack执行的引导脚本的示例。使用引导脚本进行初始化，并执行应用程序启动时执行的任何其他逻辑。</p></blockquote><p><strong>/server/boot/create-sample-models.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.dataSources.mysqlDs.automigrate(<span class="string">'CoffeeShop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    app.models.CoffeeShop.create([&#123;</span><br><span class="line">      name: <span class="string">'Bel Cafe'</span>,</span><br><span class="line">      city: <span class="string">'Vancouver'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: <span class="string">'Three Bees Coffee House'</span>,</span><br><span class="line">      city: <span class="string">'San Mateo'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: <span class="string">'Caffe Artigiano'</span>,</span><br><span class="line">      city: <span class="string">'Vancouver'</span></span><br><span class="line">    &#125;, ], <span class="function"><span class="keyword">function</span>(<span class="params">err, coffeeShops</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Models created: \n'</span>, coffeeShops);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这将保存一些测试数据到数据源。</p><h2 id="五、扩展API"><a href="#五、扩展API" class="headerlink" title="五、扩展API"></a>五、扩展API</h2><h3 id="添加远程方法"><a href="#添加远程方法" class="headerlink" title="添加远程方法"></a>添加远程方法</h3><p>按着如下步骤：</p><ol><li>查看您的应用程序的<code>/common/models</code>目录。你会注意到文件夹里有coffee-shop.js和coffee-shop.json这两个文件。</li><li><p>在编辑器中打开coffee-shop.js，默认情况下，它包含一个空的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(CoffeeShop) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>将以下代码添加到此函数中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">CoffeeShop</span>) </span>&#123;</span><br><span class="line">  CoffeeShop.status = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> currentHour = currentDate.getHours();</span><br><span class="line">    <span class="keyword">var</span> OPEN_HOUR = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">var</span> CLOSE_HOUR = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Current hour is %d'</span>, currentHour);</span><br><span class="line">    <span class="keyword">var</span> response;</span><br><span class="line">    <span class="keyword">if</span> (currentHour &gt; OPEN_HOUR &amp;&amp; currentHour &lt; CLOSE_HOUR) &#123;</span><br><span class="line">      response = <span class="string">'We are open for business.'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response = <span class="string">'Sorry, we are closed. Open daily from 6am to 8pm.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cb(<span class="literal">null</span>, response);</span><br><span class="line">  &#125;;</span><br><span class="line">  CoffeeShop.remoteMethod(</span><br><span class="line">    <span class="string">'status'</span>, &#123;</span><br><span class="line">      http: &#123;</span><br><span class="line">        path: <span class="string">'/status'</span>,</span><br><span class="line">        verb: <span class="string">'get'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      returns: &#123;</span><br><span class="line">        arg: <span class="string">'status'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>这定义了一个称为“状态”的简单远程方法，它不需要任何参数，并且根据当前时间检查时间并返回一个表示“打开营业”或“对不起我们关闭”的JSON状态消息。<br>当然，在实践中，您可以使用远程方法来做更多有趣和复杂的事情，例如在将数据保留到数据库之前操纵输入数据。您还可以更改调用远程方法的路由，并定义复杂参数并返回值。</p><h3 id="使用远程方法"><a href="#使用远程方法" class="headerlink" title="使用远程方法"></a>使用远程方法</h3><ol><li>回到应用程序根目录，运行应用程序：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br></pre></td></tr></table></figure><ol start="2"><li>转到http：// localhost：3000 / explorer查看API资源管理器。然后点击CoffeeShops，你会看到有一个新的REST端点，GET / CoffeeShop / status调用远程方法。</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/3396508-6f0ca00dc2e36023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>点击<strong>try it out</strong>！您会看到调用远程方法的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;Open for business.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过LoopBack，很轻易地添加了一个远程方法。</p><h3 id="在远程方法中执行创建，检索，更新和删除方法"><a href="#在远程方法中执行创建，检索，更新和删除方法" class="headerlink" title="在远程方法中执行创建，检索，更新和删除方法"></a>在远程方法中执行创建，检索，更新和删除方法</h3><p>状态远程方法是微不足道的，但远程方法还可以访问任何标准模型创建，检索，更新和删除方法来执行数据处理和验证。这是一个简单的例子（这不是在loopback-getting-started库中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(CoffeeShop) &#123;</span><br><span class="line">...</span><br><span class="line">  CoffeeShop.getName = function(shopId, cb) &#123;</span><br><span class="line">    CoffeeShop.findById( shopId, function (err, instance) &#123;</span><br><span class="line">        var response = &quot;Name of coffee shop is &quot; + instance.name;</span><br><span class="line">        cb(null, response);</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">  CoffeeShop.remoteMethod (</span><br><span class="line">        &apos;getName&apos;,</span><br><span class="line">        &#123;</span><br><span class="line">          http: &#123;path: &apos;/getname&apos;, verb: &apos;get&apos;&#125;,</span><br><span class="line">          accepts: &#123;arg: &apos;id&apos;, type: &apos;number&apos;, http: &#123; source: &apos;query&apos; &#125; &#125;,</span><br><span class="line">          returns: &#123;arg: &apos;name&apos;, type: &apos;string&apos;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后如果您访问远程方法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:3000/api/CoffeeShops/getname?id=1</span><br></pre></td></tr></table></figure><p>将会得到响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Name of coffee shop is Bel Cafe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、添加一个静态页面"><a href="#六、添加一个静态页面" class="headerlink" title="六、添加一个静态页面"></a>六、添加一个静态页面</h2><h3 id="中间件简介"><a href="#中间件简介" class="headerlink" title="中间件简介"></a>中间件简介</h3><p>在继续之前，您首先需要了解Express中间件的基础知识。中间件只是一个JavaScript函数，可以访问表示HTTP请求的请求对象（req），表示HTTP响应的响应对象（res），以及Express应用程序的请求 - 响应周期中，由一个名为next的变量表示的下一个中间件。</p><p>中间件可以做什么？</p><ul><li>执行任何代码。</li><li>更改请求和响应对象。</li><li>结束请求 - 响应周期。</li><li>调用堆栈中的下一个中间件。</li></ul><p>LoopBack中间件就像Express中间件，除了LoopBack添加了相位的概念，使您能够轻松设置调用中间件的顺序。这避免了Express的一个棘手问题：确保中间件在需要的时候能够执行。</p><p>当您使用应用程序生成器创建应用程序时，它将创建一个<code>server/middleware.json</code>文件，指定中间件在哪个阶段执行。注册新的中间件与编辑此JSON文件一样简单：</p><p><strong>server/middleware.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;initial:before&quot;: &#123;</span><br><span class="line">    &quot;loopback#favicon&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;initial&quot;: &#123;</span><br><span class="line">    &quot;compression&quot;: &#123;&#125;,</span><br><span class="line">    &quot;cors&quot;: &#123;</span><br><span class="line">      &quot;params&quot;: &#123;</span><br><span class="line">        &quot;origin&quot;: true,</span><br><span class="line">        &quot;credentials&quot;: true,</span><br><span class="line">        &quot;maxAge&quot;: 86400</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;helmet#xssFilter&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#frameguard&quot;: &#123;</span><br><span class="line">      &quot;params&quot;: [</span><br><span class="line">        &quot;deny&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;helmet#hsts&quot;: &#123;</span><br><span class="line">      &quot;params&quot;: &#123;</span><br><span class="line">        &quot;maxAge&quot;: 0,</span><br><span class="line">        &quot;includeSubdomains&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;helmet#hidePoweredBy&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#ieNoOpen&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#noSniff&quot;: &#123;&#125;,</span><br><span class="line">    &quot;helmet#noCache&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;session&quot;: &#123;&#125;,</span><br><span class="line">  &quot;auth&quot;: &#123;&#125;,</span><br><span class="line">  &quot;parse&quot;: &#123;&#125;,</span><br><span class="line">  &quot;routes&quot;: &#123;</span><br><span class="line">    &quot;loopback#rest&quot;: &#123;</span><br><span class="line">      &quot;paths&quot;: [</span><br><span class="line">        &quot;$&#123;restApiRoot&#125;&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;final&quot;: &#123;</span><br><span class="line">    &quot;loopback#urlNotFound&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;final:after&quot;: &#123;</span><br><span class="line">    &quot;strong-error-handler&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>middleware.json</code>中的每个顶层键都定义了一个中间件阶段：<code>initial</code>，<code>session</code>，<code>auth</code>等等，到<code>final</code>为止。在给定阶段之前和之后，还有修改器注册中间件。在给定阶段的前后也有注册中间件的修改器。</p><h3 id="更换或修改默认的根路由处理程序"><a href="#更换或修改默认的根路由处理程序" class="headerlink" title="更换或修改默认的根路由处理程序"></a>更换或修改默认的根路由处理程序</h3><p>应用程序通常需要提供静态内容，如HTML和CSS文件，客户端JavaScript文件，图像等。<br>使用LoopBack应用程序默认的脚手架很容易做到。您将去配置应用程序去启动/client文件夹中的静态资源。</p><p>首先，您必须禁用根URL的默认路由处理程序。当你加载应用程序的根URL <a href="http:// localhost:3000/" target="_blank" rel="noopener">http:// localhost:3000/</a>时，你看到应用程序用一个简单的状态消息，如这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;started&quot;:&quot;2014-11-20T21:59:47.155Z&quot;,&quot;uptime&quot;:42.054&#125;</span><br></pre></td></tr></table></figure><p>这是因为默认情况下，脚手架应用程序具有一个名为root.js的启动脚本，该脚本为根路径（“/”）设置路由处理中间件：</p><p><strong>server/boot/root.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(server) &#123; // Install a `/` route that returns server status</span><br><span class="line">  var router = server.loopback.Router();</span><br><span class="line">  router.get(&apos;/&apos;, server.loopback.status());</span><br><span class="line">  server.use(router);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该代码说，对于根URI（“/”）的任何GET请求，应用程序将返回loopback.status（）的结果。要加入您自己的静态页面，您需要禁用此脚本。要么删除它，要么将其重命名为没有.js结尾的东西（确保应用程序不会执行它）。</p><h3 id="定义静态中间件"><a href="#定义静态中间件" class="headerlink" title="定义静态中间件"></a>定义静态中间件</h3><p>接下来，您需要定义静态中间件来为/ client目录中的文件提供服务。</p><p><strong>server/middleware.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;files&quot;: &#123;&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><p><strong>server/middleware.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;files&quot;: &#123;</span><br><span class="line">  &quot;loopback#static&quot;: &#123;</span><br><span class="line">    &quot;params&quot;: &quot;$!../client&quot; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="添加一个HTML文件"><a href="#添加一个HTML文件" class="headerlink" title="添加一个HTML文件"></a>添加一个HTML文件</h3><p>这些行定义静态中间件，使应用程序将/ client目录中的文件作为静态内容。<code>$！</code>字符表示路径是相对于middleware.json文件的位置。</p><p><strong>/client/index.html</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&lt;title&gt;LoopBack&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;LoopBack Rocks!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Hello World... &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>现在再次运行应用程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .</span><br></pre></td></tr></table></figure><p>打开<a href="http://0.0.0.0:3000/" target="_blank" rel="noopener">http://0.0.0.0:3000/</a>：</p><p><img src="http://upload-images.jianshu.io/upload_images/3396508-b394064999a52916.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="七、添加自定义的Express路由"><a href="#七、添加自定义的Express路由" class="headerlink" title="七、添加自定义的Express路由"></a>七、添加自定义的Express路由</h2><h3 id="引入引导脚本"><a href="#引入引导脚本" class="headerlink" title="引入引导脚本"></a>引入引导脚本</h3><p>当LoopBack应用程序启动（也称为引导（bootstraps））时，它将运行<code>/server/boot</code>目录中的脚本，称为引导脚本。默认情况下，LoopBack按字母顺序加载引导脚本。</p><p>应用程序生成器创建的标准LoopBack应用脚手架中包含执行基本初始化的以下标准引导脚本（在/ server / boot中）：</p><ul><li><code>authentication.js</code> -  通过调用app.enableAuth()来启用应用程序的身份验证。</li><li><code>root.js</code> - 使用loopback.status()中间件定义<code>/</code>返回服务器状态的根路由。</li></ul><h3 id="添加一个新的启动脚本"><a href="#添加一个新的启动脚本" class="headerlink" title="添加一个新的启动脚本"></a>添加一个新的启动脚本</h3><p>例如，在<code>/server/boot</code>目录中添加一个名为routes.js的新引导脚本，其代码如下：</p><p><strong>/server/boot/routes.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  // Install a &quot;/ping&quot; route that returns &quot;pong&quot;</span><br><span class="line">  app.get(&apos;/ping&apos;, function(req, res) &#123;</span><br><span class="line">    res.send(&apos;pong&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，也可以使用Express路由器中间件，如下所示：</p><p><strong>/server/boot/routes.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  var router = app.loopback.Router();</span><br><span class="line">  router.get(&apos;/ping&apos;, function(req, res) &#123;</span><br><span class="line">    res.send(&apos;pongaroo&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.use(router);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，您也可以使用Express API在server.js中添加路由。例如，在调用app.start()之前将此调用添加到app.use()：</p><p><strong>server/server.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.use(&apos;/express-status&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(&#123; running: true &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// start the server if `$ node server.js`</span><br><span class="line">if (require.main === module) &#123;</span><br><span class="line">  app.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoopBack应用程序可以轻松地执行Express应用程序可以执行的所有操作。如果您熟悉Express，LoopBack将会更容易学习。</p><h3 id="运行引导脚本"><a href="#运行引导脚本" class="headerlink" title="运行引导脚本"></a>运行引导脚本</h3><p>现在，再次运行应用程序：</p><p>加载<a href="http://0.0.0.0:3000/ping" target="_blank" rel="noopener">http://0.0.0.0:3000/ping</a>。您会得到一个’pong’的响应。</p><p>现在一个简单的loopback应用程序就已经搭建完成了。</p><h2 id="八、下一步"><a href="#八、下一步" class="headerlink" title="八、下一步"></a>八、下一步</h2><p>接下来的教程将涵盖：</p><ul><li>在单个应用程序中使用多个数据源。</li><li>模型之间的关系。</li><li>远程钩子。</li><li>使用权限控制来保护REST接口。</li><li>用户注册和认证</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装LoopBack工具来创建和开发LoopBack 3.0应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node.js&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装loopback工具&quot;&gt;&lt;a href=&quot;#安装loopback工具&quot; class=&quot;headerlink&quot; title=&quot;安装loopback工具&quot;&gt;&lt;/a&gt;安装loopback工具&lt;/h3&gt;&lt;p&gt;虽然你可以自己从头开始编写一个LoopBack应用程序，但是安装一个LoopBack CLI工具能够使它更容易入门。它将构建应用程序的基本结构，然后您可以根据需要进行自定义。&lt;/p&gt;
&lt;p&gt;LoopBack提供了两个工具的选项：&lt;a href=&quot;http://loopback.io/doc/en/lb3/Installation.html#install-loopback-cli-tool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LoopBack CLI&lt;/a&gt; 和 &lt;a href=&quot;http://loopback.io/doc/en/lb3/Installation.html#install-ibm-api-connect-developer-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IBM API Connect开发工具包&lt;/a&gt;，这里可以选择LoopBack CLI来进行应用程序的构建。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
